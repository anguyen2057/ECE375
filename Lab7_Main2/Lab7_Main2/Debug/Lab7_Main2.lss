
AVRASM ver. 2.2.7  C:\Users\anguy\Documents\Atmel Studio\7.0\Lab7_Main2\Lab7_Main2\main.asm Thu Feb 20 15:40:23 2025

[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.3.300\avrasm\inc\m32u4def.inc'
C:\Users\anguy\Documents\Atmel Studio\7.0\Lab7_Main2\Lab7_Main2\main.asm(24): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.3.300\avrasm\inc\m32U4def.inc'
C:\Users\anguy\Documents\Atmel Studio\7.0\Lab7_Main2\Lab7_Main2\main.asm(808): Including file 'C:\Users\anguy\Documents\Atmel Studio\7.0\Lab7_Main2\Lab7_Main2\LCDDriver.asm'
C:\Users\anguy\Documents\Atmel Studio\7.0\Lab7_Main2\Lab7_Main2\LCDDriver.asm(47): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.3.300\avrasm\inc\m32U4def.inc'
[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.3.300\avrasm\inc\m32u4def.inc'
C:\Users\anguy\Documents\Atmel Studio\7.0\Lab7_Main2\Lab7_Main2\main.asm(24): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.3.300\avrasm\inc\m32U4def.inc'
C:\Users\anguy\Documents\Atmel Studio\7.0\Lab7_Main2\Lab7_Main2\main.asm(808): Including file 'C:\Users\anguy\Documents\Atmel Studio\7.0\Lab7_Main2\Lab7_Main2\LCDDriver.asm'
C:\Users\anguy\Documents\Atmel Studio\7.0\Lab7_Main2\Lab7_Main2\LCDDriver.asm(47): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.3.300\avrasm\inc\m32U4def.inc'
                                 
                                 ;
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega32U4.xml **********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m32U4def.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega32U4
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega32U4
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M32U4DEF_INC_
                                 #define _M32U4DEF_INC_
                                 
                                 
                                 #pragma partinc 0
                                 
                                 ; ***** SPECIFY DEVICE ***************************************************
                                 .device ATmega32U4
                                 #pragma AVRPART ADMIN PART_NAME ATmega32U4
                                 .equ	SIGNATURE_000	= 0x1e
                                 .equ	SIGNATURE_001	= 0x95
                                 .equ	SIGNATURE_002	= 0x87
                                 
                                 #pragma AVRPART CORE CORE_VERSION V3
                                 
                                 
                                 ; ***** I/O REGISTER DEFINITIONS *****************************************
                                 ; NOTE:
                                 ; Definitions marked "MEMORY MAPPED"are extended I/O ports
                                 ; and cannot be used with IN/OUT instructions
                                 .equ	PLLCSR	= 0x29
                                 .equ	PLLFRQ	= 0x32
                                 .equ	UEINT	= 0xf4	; MEMORY MAPPED
                                 .equ	UEBCHX	= 0xf3	; MEMORY MAPPED
                                 .equ	UEBCLX	= 0xf2	; MEMORY MAPPED
                                 .equ	UEDATX	= 0xf1	; MEMORY MAPPED
                                 .equ	UEIENX	= 0xf0	; MEMORY MAPPED
                                 .equ	UESTA1X	= 0xef	; MEMORY MAPPED
                                 .equ	UESTA0X	= 0xee	; MEMORY MAPPED
                                 .equ	UECFG1X	= 0xed	; MEMORY MAPPED
                                 .equ	UECFG0X	= 0xec	; MEMORY MAPPED
                                 .equ	UECONX	= 0xeb	; MEMORY MAPPED
                                 .equ	UERST	= 0xea	; MEMORY MAPPED
                                 .equ	UENUM	= 0xe9	; MEMORY MAPPED
                                 .equ	UEINTX	= 0xe8	; MEMORY MAPPED
                                 .equ	UDMFN	= 0xe6	; MEMORY MAPPED
                                 .equ	UDFNUMH	= 0xe5	; MEMORY MAPPED
                                 .equ	UDFNUML	= 0xe4	; MEMORY MAPPED
                                 .equ	UDADDR	= 0xe3	; MEMORY MAPPED
                                 .equ	UDIEN	= 0xe2	; MEMORY MAPPED
                                 .equ	UDINT	= 0xe1	; MEMORY MAPPED
                                 .equ	UDCON	= 0xe0	; MEMORY MAPPED
                                 .equ	USBINT	= 0xda	; MEMORY MAPPED
                                 .equ	USBSTA	= 0xd9	; MEMORY MAPPED
                                 .equ	USBCON	= 0xd8	; MEMORY MAPPED
                                 .equ	UHWCON	= 0xd7	; MEMORY MAPPED
                                 .equ	UDR1	= 0xce	; MEMORY MAPPED
                                 .equ	UBRR1L	= 0xcc	; MEMORY MAPPED
                                 .equ	UBRR1H	= 0xcd	; MEMORY MAPPED
                                 .equ	UCSR1C	= 0xca	; MEMORY MAPPED
                                 .equ	UCSR1B	= 0xc9	; MEMORY MAPPED
                                 .equ	UCSR1A	= 0xc8	; MEMORY MAPPED
                                 .equ 	TWAMR		= 0xbd	;
                                 .equ  TWCR		= 0xbc	;
                                 .equ 	TWDR		= 0xbb	;
                                 .equ 	TWAR		= 0xba 	;
                                 .equ 	TWSR		= 0xb9	;
                                 .equ 	TWBR		= 0xb8	;
                                 .equ	OCR3CL	= 0x9c	; MEMORY MAPPED
                                 .equ	OCR3CH	= 0x9d	; MEMORY MAPPED
                                 .equ	OCR3BL	= 0x9a	; MEMORY MAPPED
                                 .equ	OCR3BH	= 0x9b	; MEMORY MAPPED
                                 .equ	OCR3AL	= 0x98	; MEMORY MAPPED
                                 .equ	OCR3AH	= 0x99	; MEMORY MAPPED
                                 .equ	ICR3L	= 0x96	; MEMORY MAPPED
                                 .equ	ICR3H	= 0x97	; MEMORY MAPPED
                                 .equ	TCNT3L	= 0x94	; MEMORY MAPPED
                                 .equ	TCNT3H	= 0x95	; MEMORY MAPPED
                                 .equ	TCCR3C	= 0x92	; MEMORY MAPPED
                                 .equ	TCCR3B	= 0x91	; MEMORY MAPPED
                                 .equ	TCCR3A	= 0x90	; MEMORY MAPPED
                                 .equ	OCR1CL	= 0x8c	; MEMORY MAPPED
                                 .equ	OCR1CH	= 0x8d	; MEMORY MAPPED
                                 .equ	OCR1BL	= 0x8a	; MEMORY MAPPED
                                 .equ	OCR1BH	= 0x8b	; MEMORY MAPPED
                                 .equ	OCR1AL	= 0x88	; MEMORY MAPPED
                                 .equ	OCR1AH	= 0x89	; MEMORY MAPPED
                                 .equ	ICR1L	= 0x86	; MEMORY MAPPED
                                 .equ	ICR1H	= 0x87	; MEMORY MAPPED
                                 .equ	TCNT1L	= 0x84	; MEMORY MAPPED
                                 .equ	TCNT1H	= 0x85	; MEMORY MAPPED
                                 .equ	TCCR1C	= 0x82	; MEMORY MAPPED
                                 .equ	TCCR1B	= 0x81	; MEMORY MAPPED
                                 .equ	TCCR1A	= 0x80	; MEMORY MAPPED
                                 .equ	DIDR1	= 0x7f	; MEMORY MAPPED
                                 .equ	DIDR0	= 0x7e	; MEMORY MAPPED
                                 .equ	DIDR2	= 0x7d	; MEMORY MAPPED
                                 .equ	ADMUX	= 0x7c	; MEMORY MAPPED
                                 .equ	ADCSRB	= 0x7b	; MEMORY MAPPED
                                 .equ	ADCSRA	= 0x7a	; MEMORY MAPPED
                                 .equ	ADCH	= 0x79	; MEMORY MAPPED
                                 .equ	ADCL	= 0x78	; MEMORY MAPPED
                                 .equ	TIMSK4	= 0x72	; MEMORY MAPPED
                                 .equ	TIMSK3	= 0x71	; MEMORY MAPPED
                                 .equ	TIMSK1	= 0x6f	; MEMORY MAPPED
                                 .equ	TIMSK0	= 0x6e	; MEMORY MAPPED
                                 .equ	PCMSK0	= 0x6b	; MEMORY MAPPED
                                 .equ	EICRB	= 0x6a	; MEMORY MAPPED
                                 .equ	EICRA	= 0x69	; MEMORY MAPPED
                                 .equ	PCICR	= 0x68	; MEMORY MAPPED
                                 .equ	OSCCAL	= 0x66	; MEMORY MAPPED
                                 .equ	RCCTRL	= 0x67	; MEMORY MAPPED
                                 .equ	PRR1	= 0x65	; MEMORY MAPPED
                                 .equ	PRR0	= 0x64	; MEMORY MAPPED
                                 .equ	CLKPR	= 0x61	; MEMORY MAPPED
                                 .equ	WDTCSR	= 0x60	; MEMORY MAPPED
                                 .equ	SREG	= 0x3f
                                 .equ	SPL	= 0x3d
                                 .equ	SPH	= 0x3e
                                 .equ	EIND	= 0x3c
                                 .equ	SPMCSR	= 0x37
                                 .equ	MCUCR	= 0x35
                                 .equ	MCUSR	= 0x34
                                 .equ	SMCR	= 0x33
                                 .equ	OCDR	= 0x31
                                 .equ	ACSR	= 0x30
                                 .equ	SPDR	= 0x2e
                                 .equ	SPSR	= 0x2d
                                 .equ	SPCR	= 0x2c
                                 .equ	GPIOR2	= 0x2b
                                 .equ	GPIOR1	= 0x2a
                                 .equ	OCR0B	= 0x28
                                 .equ	OCR0A	= 0x27
                                 .equ	TCNT0	= 0x26
                                 .equ	TCCR0B	= 0x25
                                 .equ	TCCR0A	= 0x24
                                 .equ	GTCCR	= 0x23
                                 .equ	EEARH	= 0x22
                                 .equ	EEARL	= 0x21
                                 .equ	EEDR	= 0x20
                                 .equ	EECR	= 0x1f
                                 .equ	GPIOR0	= 0x1e
                                 .equ	EIMSK	= 0x1d
                                 .equ	EIFR	= 0x1c
                                 .equ	PCIFR	= 0x1b
                                 .equ	TIFR4	= 0x19
                                 .equ	TIFR3	= 0x18
                                 .equ	TIFR2	= 0x17
                                 .equ	TIFR1	= 0x16
                                 .equ	TIFR0	= 0x15
                                 .equ	PORTF	= 0x11
                                 .equ	DDRF	= 0x10
                                 .equ	PINF	= 0x0f
                                 .equ	PORTE	= 0x0e
                                 .equ	DDRE	= 0x0d
                                 .equ	PINE	= 0x0c
                                 .equ	PORTD	= 0x0b
                                 .equ	DDRD	= 0x0a
                                 .equ	PIND	= 0x09
                                 .equ	PORTC	= 0x08
                                 .equ	DDRC	= 0x07
                                 .equ	PINC	= 0x06
                                 .equ	PORTB	= 0x05
                                 .equ	DDRB	= 0x04
                                 .equ	PINB	= 0x03
                                 .equ	DT4	= 0xd4	; MEMORY MAPPED
                                 .equ	OCR4D	= 0xd2	; MEMORY MAPPED
                                 .equ	OCR4C	= 0xd1	; MEMORY MAPPED
                                 .equ	OCR4B	= 0xd0	; MEMORY MAPPED
                                 .equ	OCR4A	= 0xcf	; MEMORY MAPPED
                                 .equ	TCCR4E	= 0xc4	; MEMORY MAPPED
                                 .equ	TCCR4D	= 0xc3	; MEMORY MAPPED
                                 .equ	TCCR4C	= 0xc2	; MEMORY MAPPED
                                 .equ	TCCR4B	= 0xc1	; MEMORY MAPPED
                                 .equ	TCCR4A	= 0xc0	; MEMORY MAPPED
                                 .equ	TC4H	= 0xbf	; MEMORY MAPPED
                                 .equ	TCNT4	= 0xbe	; MEMORY MAPPED
                                 .equ	CLKSEL1	= 0xc6	; MEMORY MAPPED
                                 .equ	CLKSEL0	= 0xc5	; MEMORY MAPPED
                                 .equ	CLKSTA	= 0xc7	; MEMORY MAPPED
                                 
                                 
                                 ; ***** BIT DEFINITIONS **************************************************
                                 
                                 ; ***** WATCHDOG *********************
                                 ; WDTCSR - Watchdog Timer Control Register
                                 .equ	WDP0	= 0	; Watch Dog Timer Prescaler bit 0
                                 .equ	WDP1	= 1	; Watch Dog Timer Prescaler bit 1
                                 .equ	WDP2	= 2	; Watch Dog Timer Prescaler bit 2
                                 .equ	WDE	= 3	; Watch Dog Enable
                                 .equ	WDCE	= 4	; Watchdog Change Enable
                                 .equ	WDP3	= 5	; Watchdog Timer Prescaler Bit 3
                                 .equ	WDIE	= 6	; Watchdog Timeout Interrupt Enable
                                 .equ	WDIF	= 7	; Watchdog Timeout Interrupt Flag
                                 
                                 
                                 ; ***** PORTD ************************
                                 ; PORTD - Port D Data Register
                                 .equ	PORTD0	= 0	; Port D Data Register bit 0
                                 .equ	PD0	= 0	; For compatibility
                                 .equ	PORTD1	= 1	; Port D Data Register bit 1
                                 .equ	PD1	= 1	; For compatibility
                                 .equ	PORTD2	= 2	; Port D Data Register bit 2
                                 .equ	PD2	= 2	; For compatibility
                                 .equ	PORTD3	= 3	; Port D Data Register bit 3
                                 .equ	PD3	= 3	; For compatibility
                                 .equ	PORTD4	= 4	; Port D Data Register bit 4
                                 .equ	PD4	= 4	; For compatibility
                                 .equ	PORTD5	= 5	; Port D Data Register bit 5
                                 .equ	PD5	= 5	; For compatibility
                                 .equ	PORTD6	= 6	; Port D Data Register bit 6
                                 .equ	PD6	= 6	; For compatibility
                                 .equ	PORTD7	= 7	; Port D Data Register bit 7
                                 .equ	PD7	= 7	; For compatibility
                                 
                                 ; DDRD - Port D Data Direction Register
                                 .equ	DDD0	= 0	; Port D Data Direction Register bit 0
                                 .equ	DDD1	= 1	; Port D Data Direction Register bit 1
                                 .equ	DDD2	= 2	; Port D Data Direction Register bit 2
                                 .equ	DDD3	= 3	; Port D Data Direction Register bit 3
                                 .equ	DDD4	= 4	; Port D Data Direction Register bit 4
                                 .equ	DDD5	= 5	; Port D Data Direction Register bit 5
                                 .equ	DDD6	= 6	; Port D Data Direction Register bit 6
                                 .equ	DDD7	= 7	; Port D Data Direction Register bit 7
                                 
                                 ; PIND - Port D Input Pins
                                 .equ	PIND0	= 0	; Port D Input Pins bit 0
                                 .equ	PIND1	= 1	; Port D Input Pins bit 1
                                 .equ	PIND2	= 2	; Port D Input Pins bit 2
                                 .equ	PIND3	= 3	; Port D Input Pins bit 3
                                 .equ	PIND4	= 4	; Port D Input Pins bit 4
                                 .equ	PIND5	= 5	; Port D Input Pins bit 5
                                 .equ	PIND6	= 6	; Port D Input Pins bit 6
                                 .equ	PIND7	= 7	; Port D Input Pins bit 7
                                 
                                 
                                 ; ***** SPI **************************
                                 ; SPDR - SPI Data Register
                                 .equ	SPDR0	= 0	; SPI Data Register bit 0
                                 .equ	SPDR1	= 1	; SPI Data Register bit 1
                                 .equ	SPDR2	= 2	; SPI Data Register bit 2
                                 .equ	SPDR3	= 3	; SPI Data Register bit 3
                                 .equ	SPDR4	= 4	; SPI Data Register bit 4
                                 .equ	SPDR5	= 5	; SPI Data Register bit 5
                                 .equ	SPDR6	= 6	; SPI Data Register bit 6
                                 .equ	SPDR7	= 7	; SPI Data Register bit 7
                                 
                                 ; SPSR - SPI Status Register
                                 .equ	SPI2X	= 0	; Double SPI Speed Bit
                                 .equ	WCOL	= 6	; Write Collision Flag
                                 .equ	SPIF	= 7	; SPI Interrupt Flag
                                 
                                 ; SPCR - SPI Control Register
                                 .equ	SPR0	= 0	; SPI Clock Rate Select 0
                                 .equ	SPR1	= 1	; SPI Clock Rate Select 1
                                 .equ	CPHA	= 2	; Clock Phase
                                 .equ	CPOL	= 3	; Clock polarity
                                 .equ	MSTR	= 4	; Master/Slave Select
                                 .equ	DORD	= 5	; Data Order
                                 .equ	SPE	= 6	; SPI Enable
                                 .equ	SPIE	= 7	; SPI Interrupt Enable
                                 
                                 
                                 ; ***** USART1 ***********************
                                 ; UDR1 - USART I/O Data Register
                                 .equ	UDR1_0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR1_1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR1_2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR1_3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR1_4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR1_5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR1_6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR1_7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR1A - USART Control and Status Register A
                                 .equ	MPCM1	= 0	; Multi-processor Communication Mode
                                 .equ	U2X1	= 1	; Double the USART transmission speed
                                 .equ	UPE1	= 2	; Parity Error
                                 .equ	DOR1	= 3	; Data overRun
                                 .equ	FE1	= 4	; Framing Error
                                 .equ	UDRE1	= 5	; USART Data Register Empty
                                 .equ	TXC1	= 6	; USART Transmitt Complete
                                 .equ	RXC1	= 7	; USART Receive Complete
                                 
                                 ; UCSR1B - USART Control and Status Register B
                                 .equ	TXB81	= 0	; Transmit Data Bit 8
                                 .equ	RXB81	= 1	; Receive Data Bit 8
                                 .equ	UCSZ12	= 2	; Character Size
                                 .equ	TXEN1	= 3	; Transmitter Enable
                                 .equ	RXEN1	= 4	; Receiver Enable
                                 .equ	UDRIE1	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE1	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE1	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR1C - USART Control and Status Register C
                                 .equ	UCPOL1	= 0	; Clock Polarity
                                 .equ	UCSZ10	= 1	; Character Size
                                 .equ	UCPHA1	= UCSZ10	; For compatibility
                                 .equ	UCSZ11	= 2	; Character Size
                                 .equ	UDORD1	= UCSZ11	; For compatibility
                                 .equ	USBS1	= 3	; Stop Bit Select
                                 .equ	UPM10	= 4	; Parity Mode Bit 0
                                 .equ	UPM11	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL10	= 6	; USART Mode Select
                                 .equ	UMSEL11	= 7	; USART Mode Select
                                 
                                 ; UBRR1H - USART Baud Rate Register High Byte
                                 .equ	UBRR_8	= 0	; USART Baud Rate Register bit 8
                                 .equ	UBRR_9	= 1	; USART Baud Rate Register bit 9
                                 .equ	UBRR_10	= 2	; USART Baud Rate Register bit 10
                                 .equ	UBRR_11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR1L - USART Baud Rate Register Low Byte
                                 .equ	UBRR_0	= 0	; USART Baud Rate Register bit 0
                                 .equ	UBRR_1	= 1	; USART Baud Rate Register bit 1
                                 .equ	UBRR_2	= 2	; USART Baud Rate Register bit 2
                                 .equ	UBRR_3	= 3	; USART Baud Rate Register bit 3
                                 .equ	UBRR_4	= 4	; USART Baud Rate Register bit 4
                                 .equ	UBRR_5	= 5	; USART Baud Rate Register bit 5
                                 .equ	UBRR_6	= 6	; USART Baud Rate Register bit 6
                                 .equ	UBRR_7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 ; ***** BOOT_LOAD ********************
                                 ; SPMCSR - Store Program Memory Control Register
                                 .equ	SPMEN	= 0	; Store Program Memory Enable
                                 .equ	PGERS	= 1	; Page Erase
                                 .equ	PGWRT	= 2	; Page Write
                                 .equ	BLBSET	= 3	; Boot Lock Bit Set
                                 .equ	RWWSRE	= 4	; Read While Write section read enable
                                 .equ	SIGRD	= 5	; Signature Row Read
                                 .equ	RWWSB	= 6	; Read While Write Section Busy
                                 .equ	SPMIE	= 7	; SPM Interrupt Enable
                                 
                                 
                                 ; ***** EEPROM ***********************
                                 ; EEARH - EEPROM Address Register Low Byte
                                 .equ	EEAR8	= 0	; EEPROM Read/Write Access Bit 8
                                 .equ	EEAR9	= 1	; EEPROM Read/Write Access Bit 9
                                 .equ	EEAR10	= 2	; EEPROM Read/Write Access Bit 10
                                 .equ	EEAR11	= 3	; EEPROM Read/Write Access Bit 11
                                 
                                 ; EEARL - EEPROM Address Register Low Byte
                                 .equ	EEAR0	= 0	; EEPROM Read/Write Access Bit 0
                                 .equ	EEAR1	= 1	; EEPROM Read/Write Access Bit 1
                                 .equ	EEAR2	= 2	; EEPROM Read/Write Access Bit 2
                                 .equ	EEAR3	= 3	; EEPROM Read/Write Access Bit 3
                                 .equ	EEAR4	= 4	; EEPROM Read/Write Access Bit 4
                                 .equ	EEAR5	= 5	; EEPROM Read/Write Access Bit 5
                                 .equ	EEAR6	= 6	; EEPROM Read/Write Access Bit 6
                                 .equ	EEAR7	= 7	; EEPROM Read/Write Access Bit 7
                                 
                                 ; EEDR - EEPROM Data Register
                                 .equ	EEDR0	= 0	; EEPROM Data Register bit 0
                                 .equ	EEDR1	= 1	; EEPROM Data Register bit 1
                                 .equ	EEDR2	= 2	; EEPROM Data Register bit 2
                                 .equ	EEDR3	= 3	; EEPROM Data Register bit 3
                                 .equ	EEDR4	= 4	; EEPROM Data Register bit 4
                                 .equ	EEDR5	= 5	; EEPROM Data Register bit 5
                                 .equ	EEDR6	= 6	; EEPROM Data Register bit 6
                                 .equ	EEDR7	= 7	; EEPROM Data Register bit 7
                                 
                                 ; EECR - EEPROM Control Register
                                 .equ	EERE	= 0	; EEPROM Read Enable
                                 .equ	EEPE	= 1	; EEPROM Write Enable
                                 .equ	EEMPE	= 2	; EEPROM Master Write Enable
                                 .equ	EERIE	= 3	; EEPROM Ready Interrupt Enable
                                 .equ	EEPM0	= 4	; EEPROM Programming Mode Bit 0
                                 .equ	EEPM1	= 5	; EEPROM Programming Mode Bit 1
                                 
                                 
                                 ; ***** TIMER_COUNTER_0 **************
                                 ; TIMSK0 - Timer/Counter0 Interrupt Mask Register
                                 .equ	TOIE0	= 0	; Timer/Counter0 Overflow Interrupt Enable
                                 .equ	OCIE0A	= 1	; Timer/Counter0 Output Compare Match A Interrupt Enable
                                 .equ	OCIE0B	= 2	; Timer/Counter0 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR0 - Timer/Counter0 Interrupt Flag register
                                 .equ	TOV0	= 0	; Timer/Counter0 Overflow Flag
                                 .equ	OCF0A	= 1	; Timer/Counter0 Output Compare Flag 0A
                                 .equ	OCF0B	= 2	; Timer/Counter0 Output Compare Flag 0B
                                 
                                 ; TCCR0A - Timer/Counter  Control Register A
                                 .equ	WGM00	= 0	; Waveform Generation Mode
                                 .equ	WGM01	= 1	; Waveform Generation Mode
                                 .equ	COM0B0	= 4	; Compare Output Mode, Fast PWm
                                 .equ	COM0B1	= 5	; Compare Output Mode, Fast PWm
                                 .equ	COM0A0	= 6	; Compare Output Mode, Phase Correct PWM Mode
                                 .equ	COM0A1	= 7	; Compare Output Mode, Phase Correct PWM Mode
                                 
                                 ; TCCR0B - Timer/Counter Control Register B
                                 .equ	CS00	= 0	; Clock Select
                                 .equ	CS01	= 1	; Clock Select
                                 .equ	CS02	= 2	; Clock Select
                                 .equ	WGM02	= 3	; 
                                 .equ	FOC0B	= 6	; Force Output Compare B
                                 .equ	FOC0A	= 7	; Force Output Compare A
                                 
                                 ; TCNT0 - Timer/Counter0
                                 .equ	TCNT0_0	= 0	; 
                                 .equ	TCNT0_1	= 1	; 
                                 .equ	TCNT0_2	= 2	; 
                                 .equ	TCNT0_3	= 3	; 
                                 .equ	TCNT0_4	= 4	; 
                                 .equ	TCNT0_5	= 5	; 
                                 .equ	TCNT0_6	= 6	; 
                                 .equ	TCNT0_7	= 7	; 
                                 
                                 ; OCR0A - Timer/Counter0 Output Compare Register
                                 .equ	OCR0A_0	= 0	; 
                                 .equ	OCR0A_1	= 1	; 
                                 .equ	OCR0A_2	= 2	; 
                                 .equ	OCR0A_3	= 3	; 
                                 .equ	OCR0A_4	= 4	; 
                                 .equ	OCR0A_5	= 5	; 
                                 .equ	OCR0A_6	= 6	; 
                                 .equ	OCR0A_7	= 7	; 
                                 
                                 ; OCR0B - Timer/Counter0 Output Compare Register
                                 .equ	OCR0B_0	= 0	; 
                                 .equ	OCR0B_1	= 1	; 
                                 .equ	OCR0B_2	= 2	; 
                                 .equ	OCR0B_3	= 3	; 
                                 .equ	OCR0B_4	= 4	; 
                                 .equ	OCR0B_5	= 5	; 
                                 .equ	OCR0B_6	= 6	; 
                                 .equ	OCR0B_7	= 7	; 
                                 
                                 ; GTCCR - General Timer/Counter Control Register
                                 .equ	PSRSYNC	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                                 .equ	PSR10	= PSRSYNC	; For compatibility
                                 .equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** TIMER_COUNTER_3 **************
                                 ; TIMSK3 - Timer/Counter3 Interrupt Mask Register
                                 .equ	TOIE3	= 0	; Timer/Counter3 Overflow Interrupt Enable
                                 .equ	OCIE3A	= 1	; Timer/Counter3 Output Compare A Match Interrupt Enable
                                 .equ	OCIE3B	= 2	; Timer/Counter3 Output Compare B Match Interrupt Enable
                                 .equ	OCIE3C	= 3	; Timer/Counter3 Output Compare C Match Interrupt Enable
                                 .equ	ICIE3	= 5	; Timer/Counter3 Input Capture Interrupt Enable
                                 
                                 ; TIFR3 - Timer/Counter3 Interrupt Flag register
                                 .equ	TOV3	= 0	; Timer/Counter3 Overflow Flag
                                 .equ	OCF3A	= 1	; Output Compare Flag 3A
                                 .equ	OCF3B	= 2	; Output Compare Flag 3B
                                 .equ	OCF3C	= 3	; Output Compare Flag 3C
                                 .equ	ICF3	= 5	; Input Capture Flag 3
                                 
                                 ; TCCR3A - Timer/Counter3 Control Register A
                                 .equ	WGM30	= 0	; Waveform Generation Mode
                                 .equ	WGM31	= 1	; Waveform Generation Mode
                                 .equ	COM3C0	= 2	; Compare Output Mode 3C, bit 0
                                 .equ	COM3C1	= 3	; Compare Output Mode 3C, bit 1
                                 .equ	COM3B0	= 4	; Compare Output Mode 3B, bit 0
                                 .equ	COM3B1	= 5	; Compare Output Mode 3B, bit 1
                                 .equ	COM3A0	= 6	; Compare Output Mode 3A, bit 0
                                 .equ	COM3A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR3B - Timer/Counter3 Control Register B
                                 .equ	CS30	= 0	; Prescaler source of Timer/Counter 3
                                 .equ	CS31	= 1	; Prescaler source of Timer/Counter 3
                                 .equ	CS32	= 2	; Prescaler source of Timer/Counter 3
                                 .equ	WGM32	= 3	; Waveform Generation Mode
                                 .equ	WGM33	= 4	; Waveform Generation Mode
                                 .equ	ICES3	= 6	; Input Capture 3 Edge Select
                                 .equ	ICNC3	= 7	; Input Capture 3 Noise Canceler
                                 
                                 ; TCCR3C - Timer/Counter 3 Control Register C
                                 .equ	FOC3C	= 5	; Force Output Compare 3C
                                 .equ	FOC3B	= 6	; Force Output Compare 3B
                                 .equ	FOC3A	= 7	; Force Output Compare 3A
                                 
                                 
                                 ; ***** TIMER_COUNTER_1 **************
                                 ; TIMSK1 - Timer/Counter1 Interrupt Mask Register
                                 .equ	TOIE1	= 0	; Timer/Counter1 Overflow Interrupt Enable
                                 .equ	OCIE1A	= 1	; Timer/Counter1 Output Compare A Match Interrupt Enable
                                 .equ	OCIE1B	= 2	; Timer/Counter1 Output Compare B Match Interrupt Enable
                                 .equ	OCIE1C	= 3	; Timer/Counter1 Output Compare C Match Interrupt Enable
                                 .equ	ICIE1	= 5	; Timer/Counter1 Input Capture Interrupt Enable
                                 
                                 ; TIFR1 - Timer/Counter1 Interrupt Flag register
                                 .equ	TOV1	= 0	; Timer/Counter1 Overflow Flag
                                 .equ	OCF1A	= 1	; Output Compare Flag 1A
                                 .equ	OCF1B	= 2	; Output Compare Flag 1B
                                 .equ	OCF1C	= 3	; Output Compare Flag 1C
                                 .equ	ICF1	= 5	; Input Capture Flag 1
                                 
                                 ; TCCR1A - Timer/Counter1 Control Register A
                                 .equ	WGM10	= 0	; Waveform Generation Mode
                                 .equ	WGM11	= 1	; Waveform Generation Mode
                                 .equ	COM1C0	= 2	; Compare Output Mode 1C, bit 0
                                 .equ	COM1C1	= 3	; Compare Output Mode 1C, bit 1
                                 .equ	COM1B0	= 4	; Compare Output Mode 1B, bit 0
                                 .equ	COM1B1	= 5	; Compare Output Mode 1B, bit 1
                                 .equ	COM1A0	= 6	; Compare Output Mode 1A, bit 0
                                 .equ	COM1A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR1B - Timer/Counter1 Control Register B
                                 .equ	CS10	= 0	; Prescaler source of Timer/Counter 1
                                 .equ	CS11	= 1	; Prescaler source of Timer/Counter 1
                                 .equ	CS12	= 2	; Prescaler source of Timer/Counter 1
                                 .equ	WGM12	= 3	; Waveform Generation Mode
                                 .equ	WGM13	= 4	; Waveform Generation Mode
                                 .equ	ICES1	= 6	; Input Capture 1 Edge Select
                                 .equ	ICNC1	= 7	; Input Capture 1 Noise Canceler
                                 
                                 ; TCCR1C - Timer/Counter 1 Control Register C
                                 .equ	FOC1C	= 5	; Force Output Compare 1C
                                 .equ	FOC1B	= 6	; Force Output Compare 1B
                                 .equ	FOC1A	= 7	; Force Output Compare 1A
                                 
                                 
                                 ; ***** JTAG *************************
                                 ; OCDR - On-Chip Debug Related Register in I/O Memory
                                 .equ	OCDR0	= 0	; On-Chip Debug Register Bit 0
                                 .equ	OCDR1	= 1	; On-Chip Debug Register Bit 1
                                 .equ	OCDR2	= 2	; On-Chip Debug Register Bit 2
                                 .equ	OCDR3	= 3	; On-Chip Debug Register Bit 3
                                 .equ	OCDR4	= 4	; On-Chip Debug Register Bit 4
                                 .equ	OCDR5	= 5	; On-Chip Debug Register Bit 5
                                 .equ	OCDR6	= 6	; On-Chip Debug Register Bit 6
                                 .equ	OCDR7	= 7	; On-Chip Debug Register Bit 7
                                 .equ	IDRD	= OCDR7	; For compatibility
                                 
                                 ; MCUCR - MCU Control Register
                                 .equ	JTD	= 7	; JTAG Interface Disable
                                 
                                 ; MCUSR - MCU Status Register
                                 .equ	JTRF	= 4	; JTAG Reset Flag
                                 
                                 
                                 ; ***** EXTERNAL_INTERRUPT ***********
                                 ; EICRA - External Interrupt Control Register A
                                 .equ	ISC00	= 0	; External Interrupt Sense Control Bit
                                 .equ	ISC01	= 1	; External Interrupt Sense Control Bit
                                 .equ	ISC10	= 2	; External Interrupt Sense Control Bit
                                 .equ	ISC11	= 3	; External Interrupt Sense Control Bit
                                 .equ	ISC20	= 4	; External Interrupt Sense Control Bit
                                 .equ	ISC21	= 5	; External Interrupt Sense Control Bit
                                 .equ	ISC30	= 6	; External Interrupt Sense Control Bit
                                 .equ	ISC31	= 7	; External Interrupt Sense Control Bit
                                 
                                 ; EICRB - External Interrupt Control Register B
                                 .equ	ISC40	= 0	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC41	= 1	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC50	= 2	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC51	= 3	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC60	= 4	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC61	= 5	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC70	= 6	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC71	= 7	; External Interrupt 7-4 Sense Control Bit
                                 
                                 ; EIMSK - External Interrupt Mask Register
                                 .equ	INT0	= 0	; External Interrupt Request 0 Enable
                                 .equ	INT1	= 1	; External Interrupt Request 1 Enable
                                 .equ	INT2	= 2	; External Interrupt Request 2 Enable
                                 .equ	INT3	= 3	; External Interrupt Request 3 Enable
                                 .equ	INT4	= 4	; External Interrupt Request 4 Enable
                                 .equ	INT5	= 5	; External Interrupt Request 5 Enable
                                 .equ	INT6	= 6	; External Interrupt Request 6 Enable
                                 .equ	INT7	= 7	; External Interrupt Request 7 Enable
                                 
                                 ; EIFR - External Interrupt Flag Register
                                 .equ	INTF0	= 0	; External Interrupt Flag 0
                                 .equ	INTF1	= 1	; External Interrupt Flag 1
                                 .equ	INTF2	= 2	; External Interrupt Flag 2
                                 .equ	INTF3	= 3	; External Interrupt Flag 3
                                 .equ	INTF4	= 4	; External Interrupt Flag 4
                                 .equ	INTF5	= 5	; External Interrupt Flag 5
                                 .equ	INTF6	= 6	; External Interrupt Flag 6
                                 .equ	INTF7	= 7	; External Interrupt Flag 7
                                 
                                 ; PCICR - Pin Change Interrupt Control Register
                                 .equ	PCIE0	= 0	; Pin Change Interrupt Enable 0
                                 
                                 ; PCIFR - Pin Change Interrupt Flag Register
                                 .equ	PCIF0	= 0	; Pin Change Interrupt Flag 0
                                 
                                 ; PCMSK0 - Pin Change Mask Register 0
                                 .equ	PCINT0	= 0	; Pin Change Enable Mask 0
                                 .equ	PCINT1	= 1	; Pin Change Enable Mask 1
                                 .equ	PCINT2	= 2	; Pin Change Enable Mask 2
                                 .equ	PCINT3	= 3	; Pin Change Enable Mask 3
                                 .equ	PCINT4	= 4	; Pin Change Enable Mask 4
                                 .equ	PCINT5	= 5	; Pin Change Enable Mask 5
                                 .equ	PCINT6	= 6	; Pin Change Enable Mask 6
                                 .equ	PCINT7	= 7	; Pin Change Enable Mask 7
                                 
                                 
                                 ; ***** TIMER_COUNTER_4 **************
                                 ; DT4 - Timer/Counter 4 Dead Time Value
                                 .equ	DT4L0	= 0	; Timer/Counter 4 Dead Time Value Bit 0
                                 .equ	DT4L1	= 1	; Timer/Counter 4 Dead Time Value Bit 1
                                 .equ	DT4L2	= 2	; Timer/Counter 4 Dead Time Value Bit 2
                                 .equ	DT4L3	= 3	; Timer/Counter 4 Dead Time Value Bit 3
                                 .equ	DT4L4	= 4	; Timer/Counter 4 Dead Time Value Bit 4
                                 .equ	DT4L5	= 5	; Timer/Counter 4 Dead Time Value Bit 5
                                 .equ	DT4L6	= 6	; Timer/Counter 4 Dead Time Value Bit 6
                                 .equ	DT4L7	= 7	; Timer/Counter 4 Dead Time Value Bit 7
                                 
                                 ; TIFR4 - Timer/Counter4 Interrupt Flag register
                                 .equ	TOV4	= 2	; Timer/Counter4 Overflow Flag
                                 .equ	OCF4B	= 5	; Output Compare Flag 4B
                                 .equ	OCF4A	= 6	; Output Compare Flag 4A
                                 .equ	OCF4D	= 7	; Output Compare Flag 4D
                                 
                                 ; TIMSK4 - Timer/Counter4 Interrupt Mask Register
                                 .equ	TOIE4	= 2	; Timer/Counter4 Overflow Interrupt Enable
                                 .equ	OCIE4B	= 5	; Timer/Counter4 Output Compare B Match Interrupt Enable
                                 .equ	OCIE4A	= 6	; Timer/Counter4 Output Compare A Match Interrupt Enable
                                 .equ	OCIE4D	= 7	; Timer/Counter4 Output Compare D Match Interrupt Enable
                                 
                                 ; OCR4D - Timer/Counter4 Output Compare Register D
                                 .equ	OCR4D0	= 0	; Timer/Counter4 Output Compare Register Low Byte bit 0
                                 .equ	OCR4D1	= 1	; Timer/Counter4 Output Compare Register Low Byte bit 1
                                 .equ	OCR4D2	= 2	; Timer/Counter4 Output Compare Register Low Byte bit 2
                                 .equ	OCR4D3	= 3	; Timer/Counter4 Output Compare Register Low Byte bit 3
                                 .equ	OCR4D4	= 4	; Timer/Counter4 Output Compare Register Low Byte bit 4
                                 .equ	OCR4D5	= 5	; Timer/Counter4 Output Compare Register Low Byte bit 5
                                 .equ	OCR4D6	= 6	; Timer/Counter4 Output Compare Register Low Byte bit 6
                                 .equ	OCR4D7	= 7	; Timer/Counter4 Output Compare Register Low Byte bit 7
                                 
                                 ; OCR4C - Timer/Counter4 Output Compare Register C
                                 .equ	OCR4C0	= 0	; Timer/Counter4 Output Compare Register bit 0
                                 .equ	OCR4C1	= 1	; Timer/Counter4 Output Compare Register bit 1
                                 .equ	OCR4C2	= 2	; Timer/Counter4 Output Compare Register bit 2
                                 .equ	OCR4C3	= 3	; Timer/Counter4 Output Compare Register bit 3
                                 .equ	OCR4C4	= 4	; Timer/Counter4 Output Compare Register bit 4
                                 .equ	OCR4C5	= 5	; Timer/Counter4 Output Compare Register bit 5
                                 .equ	OCR4C6	= 6	; Timer/Counter4 Output Compare Register 6
                                 .equ	OCR4C7	= 7	; Timer/Counter4 Output Compare Register bit 7
                                 
                                 ; OCR4B - Timer/Counter4 Output Compare Register B
                                 .equ	OCR4B0	= 0	; Timer/Counter4 Output Compare Register bit 0
                                 .equ	OCR4B1	= 1	; Timer/Counter4 Output Compare Register bit 1
                                 .equ	OCR4B2	= 2	; Timer/Counter4 Output Compare Register bit 2
                                 .equ	OCR4B3	= 3	; Timer/Counter4 Output Compare Register bit 3
                                 .equ	OCR4B4	= 4	; Timer/Counter4 Output Compare Register bit 4
                                 .equ	OCR4B5	= 5	; Timer/Counter4 Output Compare Register bit 5
                                 .equ	OCR4B6	= 6	; Timer/Counter4 Output Compare Register bit 6
                                 .equ	OCR4B7	= 7	; Timer/Counter4 Output Compare Register bit 7
                                 
                                 ; OCR4A - Timer/Counter4 Output Compare Register A
                                 .equ	OCR4A0	= 0	; Timer/Counter4 Output Compare Register Bit 0
                                 .equ	OCR4A1	= 1	; Timer/Counter4 Output Compare Register Bit 1
                                 .equ	OCR4A2	= 2	; Timer/Counter4 Output Compare Register Low Byte Bit 2
                                 .equ	OCR4A3	= 3	; Timer/Counter4 Output Compare Register Low Byte Bit 3
                                 .equ	OCR4A4	= 4	; Timer/Counter4 Output Compare Register Bit 4
                                 .equ	OCR4A5	= 5	; Timer/Counter4 Output Compare Register Bit 5
                                 .equ	OCR4A6	= 6	; Timer/Counter4 Output Compare Register Bit 6
                                 .equ	OCR4A7	= 7	; Timer/Counter4 Output Compare Register Bit 7
                                 
                                 ; TC4H - Timer/Counter4
                                 .equ	TC48	= 0	; Timer/Counter4 bit 8
                                 .equ	TC49	= 1	; Timer/Counter4 bit 9
                                 .equ	TC410	= 2	; Timer/Counter4 bit 10
                                 
                                 ; TCNT4 - Timer/Counter4 Low Bytes
                                 .equ	TC40	= 0	; Timer/Counter4 bit 0
                                 .equ	TC41	= 1	; Timer/Counter4 bit 1
                                 .equ	TC42	= 2	; Timer/Counter4 bit 2
                                 .equ	TC43	= 3	; Timer/Counter4  bit 3
                                 .equ	TC44	= 4	; Timer/Counter4 bit 4
                                 .equ	TC45	= 5	; Timer/Counter4 bit 5
                                 .equ	TC46	= 6	; Timer/Counter4 bit 6
                                 .equ	TC47	= 7	; Timer/Counter4 bit 7
                                 
                                 ; TCCR4E - Timer/Counter 4 Control Register E
                                 .equ	OC4OE0	= 0	; Output Compare Override Enable bit
                                 .equ	OC4OE1	= 1	; Output Compare Override Enable bit
                                 .equ	OC4OE2	= 2	; Output Compare Override Enable bit
                                 .equ	OC4OE3	= 3	; Output Compare Override Enable bit
                                 .equ	OC4OE4	= 4	; Output Compare Override Enable bit
                                 .equ	OC4OE5	= 5	; Output Compare Override Enable bit
                                 .equ	ENHC4	= 6	; Enhanced Compare/PWM Mode
                                 .equ	TLOCK4	= 7	; Register Update Lock
                                 
                                 ; TCCR4D - Timer/Counter 4 Control Register D
                                 .equ	WGM40	= 0	; Waveform Generation Mode bits
                                 .equ	WGM41	= 1	; Waveform Generation Mode bits
                                 .equ	FPF4	= 2	; Fault Protection Interrupt Flag
                                 .equ	FPAC4	= 3	; Fault Protection Analog Comparator Enable
                                 .equ	FPES4	= 4	; Fault Protection Edge Select
                                 .equ	FPNC4	= 5	; Fault Protection Noise Canceler
                                 .equ	FPEN4	= 6	; Fault Protection Mode Enable
                                 .equ	FPIE4	= 7	; Fault Protection Interrupt Enable
                                 
                                 ; TCCR4C - Timer/Counter 4 Control Register C
                                 .equ	PWM4D	= 0	; Pulse Width Modulator D Enable
                                 .equ	FOC4D	= 1	; Force Output Compare Match 4D
                                 .equ	COM4D0	= 2	; Comparator D Output Mode
                                 .equ	COM4D1	= 3	; Comparator D Output Mode
                                 .equ	COM4B0S	= 4	; Comparator B Output Mode
                                 .equ	COM4B1S	= 5	; Comparator B Output Mode
                                 .equ	COM4A0S	= 6	; Comparator A Output Mode
                                 .equ	COM4A1S	= 7	; Comparator A Output Mode
                                 
                                 ; TCCR4B - Timer/Counter4 Control Register B
                                 .equ	CS40	= 0	; Clock Select Bit 0
                                 .equ	CS41	= 1	; Clock Select Bit 1
                                 .equ	CS42	= 2	; Clock Select Bit 2
                                 .equ	CS43	= 3	; Clock Select Bit 3
                                 .equ	DTPS40	= 4	; Dead Time Prescaler Bit 0
                                 .equ	DTPS41	= 5	; Dead Time Prescaler Bit 1
                                 .equ	PSR4	= 6	; Prescaler Reset Timer/Counter 4
                                 .equ	PWM4X	= 7	; PWM Inversion Mode
                                 
                                 ; TCCR4A - Timer/Counter4 Control Register A
                                 .equ	PWM4B	= 0	; 
                                 .equ	PWM4A	= 1	; 
                                 .equ	FOC4B	= 2	; Force Output Compare Match 4B
                                 .equ	FOC4A	= 3	; Force Output Compare Match 4A
                                 .equ	COM4B0	= 4	; Compare Output Mode 4B, bit 0
                                 .equ	COM4B1	= 5	; Compare Output Mode 4B, bit 1
                                 .equ	COM4A0	= 6	; Compare Output Mode 4A, bit 0
                                 .equ	COM4A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 
                                 ; ***** PORTB ************************
                                 ; PORTB - Port B Data Register
                                 .equ	PORTB0	= 0	; Port B Data Register bit 0
                                 .equ	PB0	= 0	; For compatibility
                                 .equ	PORTB1	= 1	; Port B Data Register bit 1
                                 .equ	PB1	= 1	; For compatibility
                                 .equ	PORTB2	= 2	; Port B Data Register bit 2
                                 .equ	PB2	= 2	; For compatibility
                                 .equ	PORTB3	= 3	; Port B Data Register bit 3
                                 .equ	PB3	= 3	; For compatibility
                                 .equ	PORTB4	= 4	; Port B Data Register bit 4
                                 .equ	PB4	= 4	; For compatibility
                                 .equ	PORTB5	= 5	; Port B Data Register bit 5
                                 .equ	PB5	= 5	; For compatibility
                                 .equ	PORTB6	= 6	; Port B Data Register bit 6
                                 .equ	PB6	= 6	; For compatibility
                                 .equ	PORTB7	= 7	; Port B Data Register bit 7
                                 .equ	PB7	= 7	; For compatibility
                                 
                                 ; DDRB - Port B Data Direction Register
                                 .equ	DDB0	= 0	; Port B Data Direction Register bit 0
                                 .equ	DDB1	= 1	; Port B Data Direction Register bit 1
                                 .equ	DDB2	= 2	; Port B Data Direction Register bit 2
                                 .equ	DDB3	= 3	; Port B Data Direction Register bit 3
                                 .equ	DDB4	= 4	; Port B Data Direction Register bit 4
                                 .equ	DDB5	= 5	; Port B Data Direction Register bit 5
                                 .equ	DDB6	= 6	; Port B Data Direction Register bit 6
                                 .equ	DDB7	= 7	; Port B Data Direction Register bit 7
                                 
                                 ; PINB - Port B Input Pins
                                 .equ	PINB0	= 0	; Port B Input Pins bit 0
                                 .equ	PINB1	= 1	; Port B Input Pins bit 1
                                 .equ	PINB2	= 2	; Port B Input Pins bit 2
                                 .equ	PINB3	= 3	; Port B Input Pins bit 3
                                 .equ	PINB4	= 4	; Port B Input Pins bit 4
                                 .equ	PINB5	= 5	; Port B Input Pins bit 5
                                 .equ	PINB6	= 6	; Port B Input Pins bit 6
                                 .equ	PINB7	= 7	; Port B Input Pins bit 7
                                 
                                 
                                 ; ***** PORTC ************************
                                 ; PORTC - Port C Data Register
                                 .equ	PORTC6	= 6	; Port C Data Register bit 6
                                 .equ	PC6	= 6	; For compatibility
                                 .equ	PORTC7	= 7	; Port C Data Register bit 7
                                 .equ	PC7	= 7	; For compatibility
                                 
                                 ; DDRC - Port C Data Direction Register
                                 .equ	DDC6	= 6	; Port C Data Direction Register bit 6
                                 .equ	DDC7	= 7	; Port C Data Direction Register bit 7
                                 
                                 ; PINC - Port C Input Pins
                                 .equ	PINC6	= 6	; Port C Input Pins bit 6
                                 .equ	PINC7	= 7	; Port C Input Pins bit 7
                                 
                                 
                                 ; ***** PORTE ************************
                                 ; PORTE - Data Register, Port E
                                 .equ	PORTE2	= 2	; 
                                 .equ	PE2	= 2	; For compatibility
                                 .equ	PORTE6	= 6	; 
                                 .equ	PE6	= 6	; For compatibility
                                 
                                 ; DDRE - Data Direction Register, Port E
                                 .equ	DDE2	= 2	; 
                                 .equ	DDE6	= 6	; 
                                 
                                 ; PINE - Input Pins, Port E
                                 .equ	PINE2	= 2	; 
                                 .equ	PINE6	= 6	; 
                                 
                                 
                                 ; ***** PORTF ************************
                                 ; PORTF - Data Register, Port F
                                 .equ	PORTF0	= 0	; 
                                 .equ	PF0	= 0	; For compatibility
                                 .equ	PORTF1	= 1	; 
                                 .equ	PF1	= 1	; For compatibility
                                 .equ	PORTF4	= 4	; 
                                 .equ	PF4	= 4	; For compatibility
                                 .equ	PORTF5	= 5	; 
                                 .equ	PF5	= 5	; For compatibility
                                 .equ	PORTF6	= 6	; 
                                 .equ	PF6	= 6	; For compatibility
                                 .equ	PORTF7	= 7	; 
                                 .equ	PF7	= 7	; For compatibility
                                 
                                 ; DDRF - Data Direction Register, Port F
                                 .equ	DDF0	= 0	; 
                                 .equ	DDF1	= 1	; 
                                 .equ	DDF4	= 4	; 
                                 .equ	DDF5	= 5	; 
                                 .equ	DDF6	= 6	; 
                                 .equ	DDF7	= 7	; 
                                 
                                 ; PINF - Input Pins, Port F
                                 .equ	PINF0	= 0	; 
                                 .equ	PINF1	= 1	; 
                                 .equ	PINF4	= 4	; 
                                 .equ	PINF5	= 5	; 
                                 .equ	PINF6	= 6	; 
                                 .equ	PINF7	= 7	; 
                                 
                                 
                                 ; ***** AD_CONVERTER *****************
                                 ; ADMUX - The ADC multiplexer Selection Register
                                 .equ	MUX0	= 0	; Analog Channel and Gain Selection Bits
                                 .equ	MUX1	= 1	; Analog Channel and Gain Selection Bits
                                 .equ	MUX2	= 2	; Analog Channel and Gain Selection Bits
                                 .equ	MUX3	= 3	; Analog Channel and Gain Selection Bits
                                 .equ	MUX4	= 4	; Analog Channel and Gain Selection Bits
                                 .equ	ADLAR	= 5	; Left Adjust Result
                                 .equ	REFS0	= 6	; Reference Selection Bit 0
                                 .equ	REFS1	= 7	; Reference Selection Bit 1
                                 
                                 ; ADCSRA - The ADC Control and Status register
                                 .equ	ADPS0	= 0	; ADC  Prescaler Select Bits
                                 .equ	ADPS1	= 1	; ADC  Prescaler Select Bits
                                 .equ	ADPS2	= 2	; ADC  Prescaler Select Bits
                                 .equ	ADIE	= 3	; ADC Interrupt Enable
                                 .equ	ADIF	= 4	; ADC Interrupt Flag
                                 .equ	ADATE	= 5	; ADC Auto Trigger Enable
                                 .equ	ADSC	= 6	; ADC Start Conversion
                                 .equ	ADEN	= 7	; ADC Enable
                                 
                                 ; ADCH - ADC Data Register High Byte
                                 .equ	ADCH0	= 0	; ADC Data Register High Byte Bit 0
                                 .equ	ADCH1	= 1	; ADC Data Register High Byte Bit 1
                                 .equ	ADCH2	= 2	; ADC Data Register High Byte Bit 2
                                 .equ	ADCH3	= 3	; ADC Data Register High Byte Bit 3
                                 .equ	ADCH4	= 4	; ADC Data Register High Byte Bit 4
                                 .equ	ADCH5	= 5	; ADC Data Register High Byte Bit 5
                                 .equ	ADCH6	= 6	; ADC Data Register High Byte Bit 6
                                 .equ	ADCH7	= 7	; ADC Data Register High Byte Bit 7
                                 
                                 ; ADCL - ADC Data Register Low Byte
                                 .equ	ADCL0	= 0	; ADC Data Register Low Byte Bit 0
                                 .equ	ADCL1	= 1	; ADC Data Register Low Byte Bit 1
                                 .equ	ADCL2	= 2	; ADC Data Register Low Byte Bit 2
                                 .equ	ADCL3	= 3	; ADC Data Register Low Byte Bit 3
                                 .equ	ADCL4	= 4	; ADC Data Register Low Byte Bit 4
                                 .equ	ADCL5	= 5	; ADC Data Register Low Byte Bit 5
                                 .equ	ADCL6	= 6	; ADC Data Register Low Byte Bit 6
                                 .equ	ADCL7	= 7	; ADC Data Register Low Byte Bit 7
                                 
                                 ; ADCSRB - ADC Control and Status Register B
                                 .equ	ADTS0	= 0	; ADC Auto Trigger Source 0
                                 .equ	ADTS1	= 1	; ADC Auto Trigger Source 1
                                 .equ	ADTS2	= 2	; ADC Auto Trigger Source 2
                                 .equ	ADTS3	= 4	; ADC Auto Trigger Source 3
                                 .equ	MUX5	= 5	; Analog Channel and Gain Selection Bits
                                 .equ	ADHSM	= 7	; ADC High Speed Mode
                                 
                                 ; DIDR0 - Digital Input Disable Register 1
                                 .equ	ADC0D	= 0	; ADC0 Digital input Disable
                                 .equ	ADC1D	= 1	; ADC1 Digital input Disable
                                 .equ	ADC2D	= 2	; ADC2 Digital input Disable
                                 .equ	ADC3D	= 3	; ADC3 Digital input Disable
                                 .equ	ADC4D	= 4	; ADC4 Digital input Disable
                                 .equ	ADC5D	= 5	; ADC5 Digital input Disable
                                 .equ	ADC6D	= 6	; ADC6 Digital input Disable
                                 .equ	ADC7D	= 7	; ADC7 Digital input Disable
                                 
                                 ; DIDR2 - Digital Input Disable Register 1
                                 .equ	ADC8D	= 0	; ADC8 Digital input Disable
                                 .equ	ADC9D	= 1	; ADC9 Digital input Disable
                                 .equ	ADC10D	= 2	; ADC10 Digital input Disable
                                 .equ	ADC11D	= 3	; ADC11 Digital input Disable
                                 .equ	ADC12D	= 4	; ADC12 Digital input Disable
                                 .equ	ADC13D	= 5	; ADC13 Digital input Disable
                                 
                                 
                                 ; ***** ANALOG_COMPARATOR ************
                                 ; ADCSRB - ADC Control and Status Register B
                                 .equ	ACME	= 6	; Analog Comparator Multiplexer Enable
                                 
                                 ; ACSR - Analog Comparator Control And Status Register
                                 .equ	ACIS0	= 0	; Analog Comparator Interrupt Mode Select bit 0
                                 .equ	ACIS1	= 1	; Analog Comparator Interrupt Mode Select bit 1
                                 .equ	ACIC	= 2	; Analog Comparator Input Capture Enable
                                 .equ	ACIE	= 3	; Analog Comparator Interrupt Enable
                                 .equ	ACI	= 4	; Analog Comparator Interrupt Flag
                                 .equ	ACO	= 5	; Analog Compare Output
                                 .equ	ACBG	= 6	; Analog Comparator Bandgap Select
                                 .equ	ACD	= 7	; Analog Comparator Disable
                                 
                                 ; DIDR1 - 
                                 .equ	AIN0D	= 0	; AIN0 Digital Input Disable
                                 .equ	AIN1D	= 1	; AIN1 Digital Input Disable
                                 
                                 
                                 ; ***** CPU **************************
                                 ; SREG - Status Register
                                 .equ	SREG_C	= 0	; Carry Flag
                                 .equ	SREG_Z	= 1	; Zero Flag
                                 .equ	SREG_N	= 2	; Negative Flag
                                 .equ	SREG_V	= 3	; Two's Complement Overflow Flag
                                 .equ	SREG_S	= 4	; Sign Bit
                                 .equ	SREG_H	= 5	; Half Carry Flag
                                 .equ	SREG_T	= 6	; Bit Copy Storage
                                 .equ	SREG_I	= 7	; Global Interrupt Enable
                                 
                                 ; MCUCR - MCU Control Register
                                 .equ	IVCE	= 0	; Interrupt Vector Change Enable
                                 .equ	IVSEL	= 1	; Interrupt Vector Select
                                 .equ	PUD	= 4	; Pull-up disable
                                 ;.equ	JTD	= 7	; JTAG Interface Disable
                                 
                                 ; MCUSR - MCU Status Register
                                 .equ	PORF	= 0	; Power-on reset flag
                                 .equ	EXTRF	= 1	; External Reset Flag
                                 .equ	BORF	= 2	; Brown-out Reset Flag
                                 .equ	WDRF	= 3	; Watchdog Reset Flag
                                 ;.equ	JTRF	= 4	; JTAG Reset Flag
                                 
                                 ; OSCCAL - Oscillator Calibration Value
                                 .equ	CAL0	= 0	; Oscillator Calibration Value Bit0
                                 .equ	CAL1	= 1	; Oscillator Calibration Value Bit1
                                 .equ	CAL2	= 2	; Oscillator Calibration Value Bit2
                                 .equ	CAL3	= 3	; Oscillator Calibration Value Bit3
                                 .equ	CAL4	= 4	; Oscillator Calibration Value Bit4
                                 .equ	CAL5	= 5	; Oscillator Calibration Value Bit5
                                 .equ	CAL6	= 6	; Oscillator Calibration Value Bit6
                                 .equ	CAL7	= 7	; Oscillator Calibration Value Bit7
                                 
                                 ; RCCTRL - Oscillator Control Register
                                 .equ	RCFREQ	= 0	; 
                                 
                                 ; CLKPR - 
                                 .equ	CLKPS0	= 0	; 
                                 .equ	CLKPS1	= 1	; 
                                 .equ	CLKPS2	= 2	; 
                                 .equ	CLKPS3	= 3	; 
                                 .equ	CLKPCE	= 7	; 
                                 
                                 ; SMCR - Sleep Mode Control Register
                                 .equ	SE	= 0	; Sleep Enable
                                 .equ	SM0	= 1	; Sleep Mode Select bit 0
                                 .equ	SM1	= 2	; Sleep Mode Select bit 1
                                 .equ	SM2	= 3	; Sleep Mode Select bit 2
                                 
                                 ; EIND - Extended Indirect Register
                                 .equ	EIND0	= 0	; Bit 0
                                 
                                 ; GPIOR2 - General Purpose IO Register 2
                                 .equ	GPIOR20	= 0	; General Purpose IO Register 2 bit 0
                                 .equ	GPIOR21	= 1	; General Purpose IO Register 2 bit 1
                                 .equ	GPIOR22	= 2	; General Purpose IO Register 2 bit 2
                                 .equ	GPIOR23	= 3	; General Purpose IO Register 2 bit 3
                                 .equ	GPIOR24	= 4	; General Purpose IO Register 2 bit 4
                                 .equ	GPIOR25	= 5	; General Purpose IO Register 2 bit 5
                                 .equ	GPIOR26	= 6	; General Purpose IO Register 2 bit 6
                                 .equ	GPIOR27	= 7	; General Purpose IO Register 2 bit 7
                                 
                                 ; GPIOR1 - General Purpose IO Register 1
                                 .equ	GPIOR10	= 0	; General Purpose IO Register 1 bit 0
                                 .equ	GPIOR11	= 1	; General Purpose IO Register 1 bit 1
                                 .equ	GPIOR12	= 2	; General Purpose IO Register 1 bit 2
                                 .equ	GPIOR13	= 3	; General Purpose IO Register 1 bit 3
                                 .equ	GPIOR14	= 4	; General Purpose IO Register 1 bit 4
                                 .equ	GPIOR15	= 5	; General Purpose IO Register 1 bit 5
                                 .equ	GPIOR16	= 6	; General Purpose IO Register 1 bit 6
                                 .equ	GPIOR17	= 7	; General Purpose IO Register 1 bit 7
                                 
                                 ; GPIOR0 - General Purpose IO Register 0
                                 .equ	GPIOR00	= 0	; General Purpose IO Register 0 bit 0
                                 .equ	GPIOR01	= 1	; General Purpose IO Register 0 bit 1
                                 .equ	GPIOR02	= 2	; General Purpose IO Register 0 bit 2
                                 .equ	GPIOR03	= 3	; General Purpose IO Register 0 bit 3
                                 .equ	GPIOR04	= 4	; General Purpose IO Register 0 bit 4
                                 .equ	GPIOR05	= 5	; General Purpose IO Register 0 bit 5
                                 .equ	GPIOR06	= 6	; General Purpose IO Register 0 bit 6
                                 .equ	GPIOR07	= 7	; General Purpose IO Register 0 bit 7
                                 
                                 ; PRR1 - Power Reduction Register1
                                 .equ	PRUSART1	= 0	; Power Reduction USART1
                                 .equ	PRTIM3	= 3	; Power Reduction Timer/Counter3
                                 .equ	PRUSB	= 7	; Power Reduction USB
                                 
                                 ; PRR0 - Power Reduction Register0
                                 .equ	PRADC	= 0	; Power Reduction ADC
                                 .equ	PRUSART0	= 1	; Power Reduction USART
                                 .equ	PRSPI	= 2	; Power Reduction Serial Peripheral Interface
                                 .equ	PRTIM1	= 3	; Power Reduction Timer/Counter1
                                 .equ	PRTIM0	= 5	; Power Reduction Timer/Counter0
                                 .equ	PRTIM2	= 6	; Power Reduction Timer/Counter2
                                 .equ	PRTWI	= 7	; Power Reduction TWI
                                 
                                 ; CLKSTA - 
                                 .equ	EXTON	= 0	; 
                                 .equ	RCON	= 1	; 
                                 
                                 ; CLKSEL0 - 
                                 .equ	CLKS	= 0	; 
                                 .equ	EXTE	= 2	; 
                                 .equ	RCE	= 3	; 
                                 .equ	EXSUT0	= 4	; 
                                 .equ	EXSUT1	= 5	; 
                                 .equ	RCSUT0	= 6	; 
                                 .equ	RCSUT1	= 7	; 
                                 
                                 ; CLKSEL1 - 
                                 .equ	EXCKSEL0	= 0	; 
                                 .equ	EXCKSEL1	= 1	; 
                                 .equ	EXCKSEL2	= 2	; 
                                 .equ	EXCKSEL3	= 3	; 
                                 .equ	RCCKSEL0	= 4	; 
                                 .equ	RCCKSEL1	= 5	; 
                                 .equ	RCCKSEL2	= 6	; 
                                 .equ	RCCKSEL3	= 7	; 
                                 
                                 
                                 ; ***** PLL **************************
                                 ; PLLCSR - PLL Status and Control register
                                 .equ	PLOCK	= 0	; PLL Lock Status Bit
                                 .equ	PLLE	= 1	; PLL Enable Bit
                                 .equ	PINDIV	= 4	; PLL prescaler Bit 2
                                 
                                 ; PLLFRQ - PLL Frequency Control Register
                                 .equ	PDIV0	= 0	; 
                                 .equ	PDIV1	= 1	; 
                                 .equ	PDIV2	= 2	; 
                                 .equ	PDIV3	= 3	; 
                                 .equ	PLLTM0	= 4	; 
                                 .equ	PLLTM1	= 5	; 
                                 .equ	PLLUSB	= 6	; 
                                 .equ	PINMUX	= 7	; 
                                 
                                 
                                 ; ***** USB_DEVICE *******************
                                 ; USBCON - USB General Control Register
                                 .equ	VBUSTE	= 0	; 
                                 .equ	OTGPADE	= 4	; 
                                 .equ	FRZCLK	= 5	; 
                                 .equ	USBE	= 7	; 
                                 
                                 ; UDCON - 
                                 .equ	DETACH	= 0	; 
                                 .equ	RMWKUP	= 1	; 
                                 .equ	LSM	= 2	; USB low speed mode
                                 .equ	RSTCPU	= 3	; 
                                 
                                 ; UDINT - 
                                 .equ	SUSPI	= 0	; 
                                 .equ	SOFI	= 2	; 
                                 .equ	EORSTI	= 3	; 
                                 .equ	WAKEUPI	= 4	; 
                                 .equ	EORSMI	= 5	; 
                                 .equ	UPRSMI	= 6	; 
                                 
                                 ; UDIEN - 
                                 .equ	SUSPE	= 0	; 
                                 .equ	SOFE	= 2	; 
                                 .equ	EORSTE	= 3	; 
                                 .equ	WAKEUPE	= 4	; 
                                 .equ	EORSME	= 5	; 
                                 .equ	UPRSME	= 6	; 
                                 
                                 ; UDADDR - 
                                 .equ	UADD0	= 0	; 
                                 .equ	UADD1	= 1	; 
                                 .equ	UADD2	= 2	; 
                                 .equ	UADD3	= 3	; 
                                 .equ	UADD4	= 4	; 
                                 .equ	UADD5	= 5	; 
                                 .equ	UADD6	= 6	; 
                                 .equ	ADDEN	= 7	; 
                                 
                                 ; UDFNUML - 
                                 .equ	FNUM0	= 0	; 
                                 .equ	FNUM1	= 1	; 
                                 .equ	FNUM2	= 2	; 
                                 .equ	FNUM3	= 3	; 
                                 .equ	FNUM4	= 4	; 
                                 .equ	FNUM5	= 5	; 
                                 .equ	FNUM6	= 6	; 
                                 .equ	FNUM7	= 7	; 
                                 
                                 ; UDFNUMH - 
                                 .equ	FNUM8	= 0	; 
                                 .equ	FNUM9	= 1	; 
                                 .equ	FNUM10	= 2	; 
                                 
                                 ; UDMFN - 
                                 .equ	FNCERR	= 4	; 
                                 
                                 ; UEINTX - 
                                 .equ	TXINI	= 0	; 
                                 .equ	STALLEDI	= 1	; 
                                 .equ	RXOUTI	= 2	; 
                                 .equ	RXSTPI	= 3	; 
                                 .equ	NAKOUTI	= 4	; 
                                 .equ	RWAL	= 5	; 
                                 .equ	NAKINI	= 6	; 
                                 .equ	FIFOCON	= 7	; 
                                 
                                 ; UENUM - 
                                 .equ	UENUM_0	= 0	; 
                                 .equ	UENUM_1	= 1	; 
                                 .equ	UENUM_2	= 2	; 
                                 
                                 ; UERST - 
                                 .equ	EPRST0	= 0	; 
                                 .equ	EPRST1	= 1	; 
                                 .equ	EPRST2	= 2	; 
                                 .equ	EPRST3	= 3	; 
                                 .equ	EPRST4	= 4	; 
                                 .equ	EPRST5	= 5	; 
                                 .equ	EPRST6	= 6	; 
                                 
                                 ; UECONX - 
                                 .equ	EPEN	= 0	; 
                                 .equ	RSTDT	= 3	; 
                                 .equ	STALLRQC	= 4	; 
                                 .equ	STALLRQ	= 5	; 
                                 
                                 ; UECFG0X - 
                                 .equ	EPDIR	= 0	; 
                                 .equ	EPTYPE0	= 6	; 
                                 .equ	EPTYPE1	= 7	; 
                                 
                                 ; UECFG1X - 
                                 .equ	ALLOC	= 1	; 
                                 .equ	EPBK0	= 2	; 
                                 .equ	EPBK1	= 3	; 
                                 .equ	EPSIZE0	= 4	; 
                                 .equ	EPSIZE1	= 5	; 
                                 .equ	EPSIZE2	= 6	; 
                                 
                                 ; UESTA0X - 
                                 .equ	NBUSYBK0	= 0	; 
                                 .equ	NBUSYBK1	= 1	; 
                                 .equ	DTSEQ0	= 2	; 
                                 .equ	DTSEQ1	= 3	; 
                                 .equ	UNDERFI	= 5	; 
                                 .equ	OVERFI	= 6	; 
                                 .equ	CFGOK	= 7	; 
                                 
                                 ; UESTA1X - 
                                 .equ	CURRBK0	= 0	; 
                                 .equ	CURRBK1	= 1	; 
                                 .equ	CTRLDIR	= 2	; 
                                 
                                 ; UEIENX - 
                                 .equ	TXINE	= 0	; 
                                 .equ	STALLEDE	= 1	; 
                                 .equ	RXOUTE	= 2	; 
                                 .equ	RXSTPE	= 3	; 
                                 .equ	NAKOUTE	= 4	; 
                                 .equ	NAKINE	= 6	; 
                                 .equ	FLERRE	= 7	; 
                                 
                                 ; UEDATX - 
                                 .equ	DAT0	= 0	; 
                                 .equ	DAT1	= 1	; 
                                 .equ	DAT2	= 2	; 
                                 .equ	DAT3	= 3	; 
                                 .equ	DAT4	= 4	; 
                                 .equ	DAT5	= 5	; 
                                 .equ	DAT6	= 6	; 
                                 .equ	DAT7	= 7	; 
                                 
                                 ; UEBCLX - 
                                 .equ	BYCT0	= 0	; 
                                 .equ	BYCT1	= 1	; 
                                 .equ	BYCT2	= 2	; 
                                 .equ	BYCT3	= 3	; 
                                 .equ	BYCT4	= 4	; 
                                 .equ	BYCT5	= 5	; 
                                 .equ	BYCT6	= 6	; 
                                 .equ	BYCT7	= 7	; 
                                 
                                 ; UEINT - 
                                 .equ	EPINT0	= 0	; 
                                 .equ	EPINT1	= 1	; 
                                 .equ	EPINT2	= 2	; 
                                 .equ	EPINT3	= 3	; 
                                 .equ	EPINT4	= 4	; 
                                 .equ	EPINT5	= 5	; 
                                 .equ	EPINT6	= 6	; 
                                 
                                 ; USBINT - 
                                 .equ	VBUSTI	= 0	; 
                                 
                                 ; USBSTA - 
                                 .equ	VBUS	= 0	; 
                                 .equ	SPEED	= 3	; 
                                 
                                 ; USBCON - USB General Control Register
                                 ;.equ	VBUSTE	= 0	; 
                                 ;.equ	OTGPADE	= 4	; 
                                 ;.equ	FRZCLK	= 5	; 
                                 ;.equ	USBE	= 7	; 
                                 
                                 ; UHWCON - 
                                 .equ	UVREGE	= 0	; 
                                 
                                 ; TWCR - Two-Wire Interface Control
                                 .equ		TWIE	= 0	;
                                 .equ 		TWEN	= 2	;
                                 .equ 		TWWC	= 3	;
                                 .equ 		TWSTO	= 4	;
                                 .equ 		TWSTA	= 5	;
                                 .equ 		TWEA	= 6	;
                                 .equ 		TWINT	= 7	;
                                 
                                 ; TWSR - Two-Wire Status
                                 .equ 		TWPS0	= 0	;
                                 .equ 		TWPS1	= 1	;
                                 
                                 ; TWAR
                                 .equ 		TWGCE	= 0	;
                                 
                                 
                                 ; ***** LOCKSBITS ********************************************************
                                 .equ	LB1	= 0	; Lock bit
                                 .equ	LB2	= 1	; Lock bit
                                 .equ	BLB01	= 2	; Boot Lock bit
                                 .equ	BLB02	= 3	; Boot Lock bit
                                 .equ	BLB11	= 4	; Boot lock bit
                                 .equ	BLB12	= 5	; Boot lock bit
                                 
                                 
                                 ; ***** FUSES ************************************************************
                                 ; LOW fuse bits
                                 .equ	CKSEL0	= 0	; Select Clock Source
                                 .equ	CKSEL1	= 1	; Select Clock Source
                                 .equ	CKSEL2	= 2	; Select Clock Source
                                 .equ	CKSEL3	= 3	; Select Clock Source
                                 .equ	SUT0	= 4	; Select start-up time
                                 .equ	SUT1	= 5	; Select start-up time
                                 .equ	CKOUT	= 6	; Oscillator options
                                 .equ	CKDIV8	= 7	; Divide clock by 8
                                 
                                 ; HIGH fuse bits
                                 .equ	BOOTRST	= 0	; Select Reset Vector
                                 .equ	BOOTSZ0	= 1	; Select Boot Size
                                 .equ	BOOTSZ1	= 2	; Select Boot Size
                                 .equ	EESAVE	= 3	; EEPROM memory is preserved through chip erase
                                 .equ	WDTON	= 4	; Watchdog timer always on
                                 .equ	SPIEN	= 5	; Enable Serial programming and Data Downloading
                                 .equ	JTAGEN	= 6	; Enable JTAG
                                 .equ	OCDEN	= 7	; Enable OCD
                                 
                                 ; EXTENDED fuse bits
                                 .equ	BODLEVEL0	= 0	; Brown-out Detector trigger level
                                 .equ	BODLEVEL1	= 1	; Brown-out Detector trigger level
                                 .equ	BODLEVEL2	= 2	; Brown-out Detector trigger level
                                 .equ	HWBE	= 3	; Hardware Boot Enable
                                 
                                 
                                 
                                 ; ***** CPU REGISTER DEFINITIONS *****************************************
                                 .def	XH	= r27
                                 .def	XL	= r26
                                 .def	YH	= r29
                                 .def	YL	= r28
                                 .def	ZH	= r31
                                 .def	ZL	= r30
                                 
                                 
                                 
                                 ; ***** DATA MEMORY DECLARATIONS *****************************************
                                 .equ	FLASHEND	= 0x3fff	; Note: Word address
                                 .equ	IOEND	= 0x00ff
                                 .equ	SRAM_START	= 0x0100
                                 .equ	SRAM_SIZE	= 2560
                                 .equ	RAMEND	= 0x0aff
                                 .equ	XRAMEND	= 0x0000
                                 .equ	E2END	= 0x03ff
                                 .equ	EEPROMEND	= 0x03ff
                                 .equ	EEADRBITS	= 10
                                 #pragma AVRPART MEMORY PROG_FLASH 32768
                                 #pragma AVRPART MEMORY EEPROM 1024
                                 #pragma AVRPART MEMORY INT_SRAM SIZE 2560
                                 #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                                 
                                 
                                 
                                 ; ***** BOOTLOADER DECLARATIONS ******************************************
                                 .equ	NRWW_START_ADDR	= 0x3800
                                 .equ	NRWW_STOP_ADDR	= 0x3fff
                                 .equ	RWW_START_ADDR	= 0x0
                                 .equ	RWW_STOP_ADDR	= 0x37ff
                                 .equ	PAGESIZE	= 64
                                 .equ	FIRSTBOOTSTART	= 0x3f00
                                 .equ	SECONDBOOTSTART	= 0x3e00
                                 .equ	THIRDBOOTSTART	= 0x3c00
                                 .equ	FOURTHBOOTSTART	= 0x3800
                                 .equ	SMALLBOOTSTART	= FIRSTBOOTSTART
                                 .equ	LARGEBOOTSTART	= FOURTHBOOTSTART
                                 
                                 
                                 
                                 ; ***** INTERRUPT VECTORS ************************************************
                                 .equ	INT0addr	= 0x0002	; External Interrupt Request 0
                                 .equ	INT1addr	= 0x0004	; External Interrupt Request 1
                                 .equ	INT2addr	= 0x0006	; External Interrupt Request 2
                                 .equ	INT3addr	= 0x0008	; External Interrupt Request 3
                                 .equ	Reserved1addr	= 0x000a	; Reserved1
                                 .equ	Reserved2addr	= 0x000c	; Reserved2
                                 .equ	INT6addr	= 0x000e	; External Interrupt Request 6
                                 .equ	Reserved3addr	= 0x0010	; Reserved3
                                 .equ	PCI0addr	= 0x0012	; Pin Change Interrupt Request 0
                                 .equ	USB_GENaddr	= 0x0014	; USB General Interrupt Request
                                 .equ	USB_COMaddr	= 0x0016	; USB Endpoint/Pipe Interrupt Communication Request
                                 .equ	WDTaddr	= 0x0018	; Watchdog Time-out Interrupt
                                 .equ	Reserved4addr	= 0x001a	; Reserved4
                                 .equ	Reserved5addr	= 0x001c	; Reserved5
                                 .equ	Reserved6addr	= 0x001e	; Reserved6
                                 .equ	ICP1addr	= 0x0020	; Timer/Counter1 Capture Event
                                 .equ	OC1Aaddr	= 0x0022	; Timer/Counter1 Compare Match A
                                 .equ	OC1Baddr	= 0x0024	; Timer/Counter1 Compare Match B
                                 .equ	OC1Caddr	= 0x0026	; Timer/Counter1 Compare Match C
                                 .equ	OVF1addr	= 0x0028	; Timer/Counter1 Overflow
                                 .equ	OC0Aaddr	= 0x002a	; Timer/Counter0 Compare Match A
                                 .equ	OC0Baddr	= 0x002c	; Timer/Counter0 Compare Match B
                                 .equ	OVF0addr	= 0x002e	; Timer/Counter0 Overflow
                                 .equ	SPIaddr	= 0x0030	; SPI Serial Transfer Complete
                                 .equ	URXC1addr	= 0x0032	; USART1, Rx Complete
                                 .equ	UDRE1addr	= 0x0034	; USART1 Data register Empty
                                 .equ	UTXC1addr	= 0x0036	; USART1, Tx Complete
                                 .equ	ACIaddr	= 0x0038	; Analog Comparator
                                 .equ	ADCCaddr	= 0x003a	; ADC Conversion Complete
                                 .equ	ERDYaddr	= 0x003c	; EEPROM Ready
                                 .equ	ICP3addr	= 0x003e	; Timer/Counter3 Capture Event
                                 .equ	OC3Aaddr	= 0x0040	; Timer/Counter3 Compare Match A
                                 .equ	OC3Baddr	= 0x0042	; Timer/Counter3 Compare Match B
                                 .equ	OC3Caddr	= 0x0044	; Timer/Counter3 Compare Match C
                                 .equ	OVF3addr	= 0x0046	; Timer/Counter3 Overflow
                                 .equ	TWIaddr	= 0x0048	; 2-wire Serial Interface
                                 .equ	SPMRaddr	= 0x004a	; Store Program Memory Read
                                 .equ	OC4Aaddr	= 0x004c	; Timer/Counter4 Compare Match A
                                 .equ	OC4Baddr	= 0x004e	; Timer/Counter4 Compare Match B
                                 .equ	OC4Daddr	= 0x0050	; Timer/Counter4 Compare Match D
                                 .equ	OVF4addr	= 0x0052	; Timer/Counter4 Overflow
                                 .equ	TIMER4_FPFaddr	= 0x0054	; Timer/Counter4 Fault Protection Interrupt
                                 
                                 .equ	INT_VECTORS_SIZE	= 86	; size in words
                                 
                                 #endif  /* _M32U4DEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 
                                 ; Lab7_Main2.asm
                                 ;
                                 ; Created: 12/3/2024 4:40:02 AM
                                 ; Author : Anguyen2057
                                 ;
                                 
                                 
                                 ;***********************************************************
                                 ;*
                                 ;*	This is the TRANSMIT skeleton file for Lab 7 of ECE 375
                                 ;*
                                 ;*  	Rock Paper Scissors
                                 ;* 	Requirement:
                                 ;* 	1. USART1 communication
                                 ;* 	2. Timer/counter1 Normal mode to create a 1.5-sec delay
                                 ;***********************************************************
                                 ;*
                                 ;*	 Author: Enter your name
                                 ;*	   Date: Enter Date
                                 ;*
                                 ;***********************************************************
                                 
                                 .include "m32U4def.inc"         ; Include definition file
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega32U4.xml **********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m32U4def.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega32U4
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega32U4
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M32U4DEF_INC_
                                 #endif  /* _M32U4DEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 
                                 ;***********************************************************
                                 ;*  Internal Register Definitions and Constants
                                 ;*	Register r20-r22 are reserved
                                 ;***********************************************************
                                 .def    mpr = r16               ; Multi-Purpose Register
                                 .def	temp = r17				; Tempo Register
                                 .def	gesture_send = r18		; Hold the sending gesture code
                                 .def	ready_flag = r19		; 
                                 
                                 
                                 .def	gesture_receive = r23
                                 .def	counter = r24
                                 .def	counter2 = r25
                                 
                                 
                                 ; Use this signal code between two boards for their game ready
                                 .equ    SendReady = 0b11111111
                                 
                                 
                                 ;***********************************************************
                                 ;*  Preload Value = 0x48E5
                                 ;*  Prescaler = 256 => timer increment time = 256/8MHz = 32 micro seconds
                                 ;*  => total timer count to get 1.5 secs = 1.5/ 32 microsec = 46875
                                 ;*  which is okay since Timer/Counter1 is 16 bits
                                 ;*  => Preload value = 65536 - 46875 = 18661 = 0x48E5
                                 ;***********************************************************
                                 .equ PRELOAD_HIGH = 0x48       ; High byte of preload value
                                 .equ PRELOAD_LOW  = 0xE5       ; Low byte of preload value
                                 
                                 
                                 .equ ROCK_CODE = 0x01
                                 .equ PAPER_CODE = 0x02
                                 .equ SCISSORS_CODE = 0x03
                                 
                                 
                                 
                                 ;***********************************************************
                                 ;*  Start of Code Segment
                                 ;***********************************************************
                                 .cseg                           ; Beginning of code segment
                                 
                                 ;***********************************************************
                                 ;*  Interrupt Vectors
                                 ;***********************************************************
                                 .org	$0000						; Beginning of IVs
000000 c055                      		rjmp	INIT				; Reset interrupt
                                 
                                 .org	$0002
000002 d09f                      		rcall	Input_4				; Call PD7 function
000003 9518                      		reti
                                 
                                 .org	$0004
000004 d0c7                      		rcall	Input_7				; Call PD4 function
000005 9518                      		reti
                                 
                                 .org	$0028
000028 d164                      		rcall	WAIT_1_Half			; $0028 TIMER1 OVF Timer/Counter1 Overflow page 63 DATASHEET
000029 9518                      		reti
                                 
                                 .org	$0032
000032 d0c1                      		rcall	USART_Receive		; USART1, Rx complete interrupt
000033 9518                      		reti
                                 
                                 .org	$0056						; End of Interrupt Vectors
                                 
                                 ;***********************************************************
                                 ;*  Program Initialization
                                 ;***********************************************************
                                 INIT:
                                 	;Stack Pointer (VERY IMPORTANT!!!!)
000056 e00a                      		ldi mpr, high(RAMEND)	; Load high byte of RAMEND
000057 bf0e                      		out SPH, mpr			; Set high byte of stack pointer
000058 ef0f                      		ldi mpr, low(RAMEND)	; Load low byte of RAMEND
000059 bf0d                      		out SPL, mpr			; Set low byte of stack pointer
                                 
                                 
                                 	;I/O Ports
                                 
                                 		; Initialize Port B for output
00005a ef0f                      		ldi		mpr, 0xFF
00005b b904                      		out		DDRB, mpr		; Set DDR register for Port B
00005c e000                      		ldi		mpr, 0x00
00005d b905                      		out		PORTB, mpr		; Set the default output for Port B
                                 
                                 		; Initialize Port D for input
00005e e000                      		ldi		mpr, 0x00
00005f b90a                      		out		DDRD, mpr		; Set DDR register for Port D
000060 e003                      		ldi		mpr, 0x03
000061 b90b                      		out		PORTD, mpr		; Set Port D to Input with Hi
                                 
000062 e008                      		ldi		mpr, (1<<PD3)	; Set Port D pin 2 (RXD1) for input
000063 b90a                      		out		DDRD, mpr		; and Port D pin 3 (TXD1) for output
                                 
                                 		; Set the Interrupt Sense Control to falling edge
000064 e00a                      		ldi		mpr, (1<<ISC01) | (0<<ISC00) | (1<<ISC11) | (0<<ISC10)
000065 9300 0069                 		sts		EICRA, mpr		; Use sts, EICRA in extended I/O space
                                 
                                 		; Configure the External Interrupt Mask
000067 e003                      		ldi		mpr, (1<<INT0) | (1<<INT1)
000068 bb0d                      		out		EIMSK, mpr
                                 
                                 
                                 
                                 	;USART1
                                 
                                 		; Set double data rate
000069 e002                      		ldi		mpr, (1 << U2X1)
00006a 9300 00c8                 		sts		UCSR1A, mpr
                                 
                                 		; Set baudrate at 2400bps
                                 		; UBRR1 = 416 = 0x01A0 => high = 0x01 and low = 0xA0
00006c e001                      		ldi     mpr, high(0x01A0)	; Set Baud Rate to 2400 bps
00006d 9300 00cd                 		sts     UBRR1H, mpr			; Double-Speed => divider becomes 8
00006f ea00                      		ldi		mpr, low(0x01A0)	; Look at Slide 96 in Chap 5
000070 9300 00cc                 		sts		UBRR1L, mpr
                                 
                                 
                                 		; Set frame format: 8-bit data, 2 stop bits
000072 e00e                      		ldi     mpr, (1 << UCSZ11) | (1 << UCSZ10) | (1 << USBS1)
000073 9300 00ca                 		sts     UCSR1C, mpr
                                 
                                 		;Enable receiver and transmitter
000075 e908                      		ldi     mpr, (1 << RXEN1) | (1 << TXEN1) | (1 << RXCIE1) | (0 << UCSZ12)	; Enable RX and TX
000076 9300 00c9                 		sts     UCSR1B, mpr
                                 
                                 
                                 		
                                 		;Set frame format: 8 data bits, 2 stop bits
                                 
                                 	;TIMER/COUNTER1
                                 		;Set Normal mode
000078 e000                      		ldi		mpr, 0x00			; Normal mode (WGM bits all 0)
000079 9300 0080                 		sts		TCCR1A, mpr
00007b e004                      		ldi		mpr, (1 << CS12)	; Prescaler = 256
00007c 9300 0081                 		sts		TCCR1B, mpr
                                 
                                 
                                 	;Other
                                 		; Initialize LCD
00007e d164                      		rcall LCDInit			; Initialize LCD
00007f d185                      		rcall LCDBacklightOn	; Turn on LCD backlight
000080 d1a1                      		rcall LCDClr			; Clear LCD initially
                                 
000081 2711                      		clr		temp
000082 2733                      		clr		ready_flag
000083 2777                      		clr		gesture_receive
000084 2722                      		clr		gesture_send
                                 
000085 d002                      		rcall	Begin
                                 
000086 9478                      		sei
                                 
                                 
                                 ;***********************************************************
                                 ;*  Main Program
                                 ;***********************************************************
                                 MAIN:
                                 
                                 	;TODO: ???
                                 
000087 cfff                      		rjmp	MAIN
                                 
                                 ;***********************************************************
                                 ;*	Functions and Subroutines
                                 ;***********************************************************
                                 Begin:
000088 e5e8                      		ldi ZL, LOW(STRING_START1 << 1)
000089 e0f3                      		ldi ZH, HIGH(STRING_START1 << 1)
00008a e0c0                      		ldi YL, LOW(0x0100)				; Line 1 SRAM address
00008b e0d1                      		ldi YH, HIGH(0x0100)
00008c d11a                      		rcall CopyToSRAM
                                 
00008d e6e2                      		ldi ZL, LOW(STRING_START2 << 1)
00008e e0f3                      		ldi ZH, HIGH(STRING_START2 << 1)
00008f e1c0                      		ldi YL, LOW(0x0110)     ; Line 2 SRAM address
000090 e0d1                      		ldi YH, HIGH(0x0110)
000091 d115                      		rcall CopyToSRAM
                                 
000092 d176                      		rcall  LCDWrite 
                                 
                                 
000093 9508                      		ret
                                 
                                 
                                 ;-----------------------------------------------------------
                                 ; Func: 
                                 ; Desc: 
                                 ;	
                                 ;-----------------------------------------------------------
                                 Game_Start:
000094 d18d                      		rcall	LCDClr
000095 e7e4                      		ldi		ZL, LOW(STRING_START3 << 1)
000096 e0f3                      		ldi		ZH, HIGH(STRING_START3 << 1)
000097 e0c0                      		ldi		YL, LOW(0x0100)				; Line 1 SRAM address
000098 e0d1                      		ldi		YH, HIGH(0x0100)
000099 d10d                      		rcall	CopyToSRAM
                                 
00009a d16e                      		rcall	LCDWrite 
                                 
                                 
00009b ef0f                      		ldi		mpr, SendReady
00009c 1770                      		cp		gesture_receive, mpr
00009d f419                      		brne	LETGO
00009e 1720                      		cp		gesture_send, mpr
00009f f409                      		brne	LETGO
0000a0 d0df                      		rcall	Count_Down
                                 
                                 LETGO:
0000a1 9508                      		ret
                                 
                                 ;-----------------------------------------------------------
                                 ; Func: 
                                 ; Desc: 
                                 ;		
                                 ;-----------------------------------------------------------
                                 Input_4:
0000a2 3031                      		cpi READY_FLAG, 1			; Check if READY_FLAG is set
0000a3 f539                      		brne PD4_DISABLED			; Exit if PD7 has not been pressed
                                 
                                 
0000a4 3013                      		cpi temp, 3					; Check if temp exceeds 2
0000a5 f00c                      		brlt CONTINUE
0000a6 e010                      		ldi temp, 0					; Reset to 0 if out of bounds
                                 CONTINUE:
                                 
0000a7 d17a                      		rcall LCDClr				; Clear LCD before updating
                                 
                                 		; Load string 1 into the data memory
0000a8 e7e4                      		ldi    ZL, LOW(STRING_START3 << 1)			; Load low byte of string 1 address
0000a9 e0f3                      		ldi    ZH, HIGH(STRING_START3 << 1)			; Load high byte of string 1 address
                                 
0000aa e0c0                      		ldi    YL, LOW(0x0100)
0000ab e0d1                      		ldi    YH, HIGH(0x0100)						; Point to start of Line 1 in SRAM
                                 
0000ac d0fa                      		rcall  CopyToSRAM			; Copy name to Line 1
                                 
                                 
0000ad 3010                      		cpi		temp, 0
0000ae f021                      		breq	ROCK1
                                 
0000af 3011                      		cpi		temp, 1
0000b0 f049                      		breq	PAPER1
                                 
0000b1 3012                      		cpi		temp, 2
0000b2 f071                      		breq	SCISSORS1
                                 
                                 
                                 ROCK1:
                                 		; Load string 2 into the data memory
0000b3 e9e6                      		ldi    ZL, LOW(STRING_ROCK_0 << 1)			; Load low byte of string 2 address
0000b4 e0f3                      		ldi    ZH, HIGH(STRING_ROCK_0 << 1)			; Load high byte of string 2 address
                                 
0000b5 e1c0                      		ldi    YL, LOW(0x0110)
0000b6 e0d1                      		ldi    YH, HIGH(0x0110)		; Point to start of Line 2 in SRAM
                                 
0000b7 d0ef                      		rcall  CopyToSRAM			; Copy message to Line 2
                                 
0000b8 e021                      		ldi		gesture_send, ROCK_CODE
                                 
0000b9 c00e                      		rjmp DONE1
                                 
                                 PAPER1:
                                 		; Load string 2 into the data memory
0000ba e9ec                      		ldi    ZL, LOW(STRING_PAPER_1 << 1)			; Load low byte of string 2 address
0000bb e0f3                      		ldi    ZH, HIGH(STRING_PAPER_1 << 1)		; Load high byte of string 2 address
                                 
0000bc e1c0                      		ldi    YL, LOW(0x0110)
0000bd e0d1                      		ldi    YH, HIGH(0x0110)		; Point to start of Line 2 in SRAM
                                 
0000be d0e8                      		rcall  CopyToSRAM			; Copy message to Line 2
                                 
0000bf e022                      		ldi		gesture_send, PAPER_CODE
                                 
0000c0 c007                      		rjmp DONE1
                                 
                                 SCISSORS1:
                                 		; Load string 2 into the data memory
0000c1 eae2                      		ldi    ZL, LOW(STRING_SCISSORS_2 << 1)		; Load low byte of string 2 address
0000c2 e0f3                      		ldi    ZH, HIGH(STRING_SCISSORS_2 << 1)		; Load high byte of string 2 address
                                 
0000c3 e1c0                      		ldi    YL, LOW(0x0110)
0000c4 e0d1                      		ldi    YH, HIGH(0x0110)		; Point to start of Line 2 in SRAM
                                 
0000c5 d0e1                      		rcall  CopyToSRAM			; Copy message to Line 2
                                 
0000c6 e023                      		ldi		gesture_send, SCISSORS_CODE
                                 
0000c7 c000                      		rjmp DONE1
                                 
                                 
                                 
                                 DONE1:
0000c8 d140                      		rcall LCDWrite
0000c9 9513                      		inc temp					; Increment the gesture state
0000ca d019                      		rcall	USART_Transmit
                                 
                                 
                                 PD4_DISABLED:
0000cb 9508                      		ret
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 ;-----------------------------------------------------------
                                 ; Func: 
                                 ; Desc: 
                                 ;		
                                 ;-----------------------------------------------------------
                                 Input_7:
                                 
0000cc 3030                      		cpi		ready_flag, 0			; Check if READY_FLAG is 0
0000cd f4a9                      		brne	PD7_ALREADY_PRESSED	; Skip if already pressed
                                 
0000ce 3f7f                      		cpi		gesture_receive, SendReady
0000cf f041                      		breq	NEXT
                                 
0000d0 d151                      		rcall	LCDClr
0000d1 e8e0                      		ldi		ZL, LOW(STRING_START4 << 1)
0000d2 e0f3                      		ldi		ZH, HIGH(STRING_START4 << 1)
                                 
0000d3 e0c0                      		ldi		YL, LOW(0x0100)			; SRAM address for line 1
                                 
0000d4 e0d1                      		ldi		YH, HIGH(0x0100)
0000d5 d0d1                      		rcall	CopyToSRAM
0000d6 d132                      		rcall	LCDWrite
0000d7 c008                      		rjmp	NEXT2
                                 
                                 NEXT:
0000d8 d149                      		rcall	LCDClr
0000d9 e7e4                      		ldi		ZL, LOW(STRING_START3 << 1)
0000da e0f3                      		ldi		ZH, HIGH(STRING_START3 << 1)
0000db e0c0                      		ldi		YL, LOW(0x0100)				; Line 1 SRAM address
0000dc e0d1                      		ldi		YH, HIGH(0x0100)
0000dd d0c9                      		rcall	CopyToSRAM
                                 
0000de d12a                      		rcall	LCDWrite 
0000df d0a0                      		rcall	Count_Down
                                 NEXT2:
                                 
0000e0 ef2f                      		ldi		gesture_send, SendReady
0000e1 d002                      		rcall	USART_Transmit
0000e2 e092                      		ldi		Counter2, 2
                                 
                                 
                                 PD7_ALREADY_PRESSED:
                                 
0000e3 9508                      		ret
                                 
                                 
                                 
                                 
                                 
                                 
                                 ;-----------------------------------------------------------
                                 ; Func: 
                                 ; Desc: 
                                 ;		
                                 ;-----------------------------------------------------------
                                 USART_Transmit:
0000e4 930f                      		push	mpr
0000e5 931f                      		push	temp
                                 
0000e6 9100 00c8                 		lds		mpr, UCSR1A
0000e8 ff05                      		sbrs	mpr, UDRE1
0000e9 cffa                      		rjmp	USART_Transmit
                                 
0000ea 9320 00ce                 		sts		UDR1, gesture_send
                                 
0000ec 1772                      		cp		gesture_receive, gesture_send
0000ed f419                      		brne	IS_DISABLED1
                                 
0000ee e031                      		ldi		ready_flag, 1
0000ef 3031                      		cpi		READY_FLAG, 1		; Check if READY_FLAG is set
0000f0 f401                      		brne	IS_DISABLED1		; Exit if PD7 has not been pressed
                                 
                                 
                                 
                                 IS_DISABLED1:
0000f1 911f                      		pop		temp
0000f2 910f                      		pop		mpr
0000f3 9508                      		ret
                                 
                                 
                                 ;-----------------------------------------------------------
                                 ; Func: 
                                 ; Desc: 
                                 ;		
                                 ;-----------------------------------------------------------
                                 USART_Receive:
                                 
0000f4 930f                      		push	mpr
0000f5 931f                      		push	temp
                                 		
0000f6 9110 00ce                 		lds		temp, UDR1
                                 
0000f8 2f71                      		mov		gesture_receive, temp
                                 
0000f9 1772                      		cp		gesture_receive, gesture_send
0000fa f441                      		brne	IS_DISABLED
                                 
0000fb e031                      		ldi		ready_flag, 1
0000fc 3031                      		cpi		READY_FLAG, 1		; Check if READY_FLAG is set
0000fd f429                      		brne	IS_DISABLED			; Exit if PD7 has not been pressed
                                 
                                 
                                 
                                 		; Code for what to do with the received data
                                 		; Test to turn off LCD back light on the other board with delay
0000fe df95                      		rcall	Game_Start
                                 
0000ff 3f2f                      		cpi		gesture_send, SendReady
000100 f011                      		breq	NOT_READY
000101 3f7f                      		cpi		gesture_receive, SendReady
000102 f001                      		breq	NOT_READY
                                 		;rcall	COMPARE_RPS
                                 
                                 	
                                 NOT_READY:
                                 IS_DISABLED:
000103 911f                      		pop		temp
000104 910f                      		pop		mpr
                                 
000105 9508                      		ret
                                 
                                 
                                 
                                 
                                 
                                 ;-----------------------------------------------------------
                                 ; Func: 
                                 ; Desc: 
                                 ;		
                                 ;-----------------------------------------------------------
                                 Display_Top_Choices:
000106 930f                      		push	mpr
000107 931f                      		push	temp
                                 
000108 d119                      		rcall	LCDClr
000109 3021                      		cpi		gesture_send, ROCK_CODE
00010a f021                      		breq	PRINT_ROCK
                                 
00010b 3022                      		cpi		gesture_send, PAPER_CODE
00010c f049                      		breq	PRINT_PAPER
                                 
00010d 3023                      		cpi		gesture_send, SCISSORS_CODE
00010e f071                      		breq	PRINT_SCISSORS
                                 
                                 PRINT_ROCK:
00010f e9e6                      		ldi		ZL, LOW(STRING_ROCK_0 << 1)
000110 e0f3                      		ldi		ZH, HIGH(STRING_ROCK_0 << 1)
000111 e0c0                      		ldi		YL, LOW(0x0100)					; Line 1 SRAM address
000112 e0d1                      		ldi		YH, HIGH(0x0100)
000113 d093                      		rcall	CopyToSRAM
000114 d0f4                      		rcall	LCDWrite
000115 c00d                      		RJMP	END_CHOICE1
                                 
                                 PRINT_PAPER:
000116 e9ec                      		ldi		ZL, LOW(STRING_PAPER_1 << 1)
000117 e0f3                      		ldi		ZH, HIGH(STRING_PAPER_1 << 1)
000118 e0c0                      		ldi		YL, LOW(0x0100)					; Line 1 SRAM address
000119 e0d1                      		ldi		YH, HIGH(0x0100)
00011a d08c                      		rcall	CopyToSRAM
00011b d0ed                      		rcall	LCDWrite
00011c c006                      		RJMP	END_CHOICE1
                                 
                                 PRINT_SCISSORS:
00011d eae2                      		ldi		ZL, LOW(STRING_SCISSORS_2 << 1)
00011e e0f3                      		ldi		ZH, HIGH(STRING_SCISSORS_2 << 1)
00011f e0c0                      		ldi		YL, LOW(0x0100)					; Line 1 SRAM address
000120 e0d1                      		ldi		YH, HIGH(0x0100)
000121 d085                      		rcall	CopyToSRAM
000122 d0e6                      		rcall	LCDWrite
                                 
                                 END_CHOICE1:
000123 911f                      		pop		temp
000124 910f                      		pop		mpr
                                 
000125 9508                      		ret
                                 
                                 
                                 
                                 
                                 ;-----------------------------------------------------------
                                 ; Func: 
                                 ; Desc: 
                                 ;		
                                 ;-----------------------------------------------------------
                                 Display_Bottom_Choices:
000126 930f                      		push	mpr
000127 931f                      		push	temp
                                 		; Print other choice
000128 3071                      		cpi		gesture_receive, ROCK_CODE
000129 f021                      		breq	PRINT_ROCK1
                                 
00012a 3072                      		cpi		gesture_receive, PAPER_CODE
00012b f049                      		breq	PRINT_PAPER1
                                 
00012c 3073                      		cpi		gesture_receive, SCISSORS_CODE
00012d f071                      		breq	PRINT_SCISSORS1
                                 
                                 PRINT_ROCK1:
00012e e9e6                      		ldi		ZL, LOW(STRING_ROCK_0 << 1)
00012f e0f3                      		ldi		ZH, HIGH(STRING_ROCK_0 << 1)
000130 e1c0                      		ldi		YL, LOW(0x0110)					; Line 1 SRAM address
000131 e0d1                      		ldi		YH, HIGH(0x0110)
000132 d074                      		rcall	CopyToSRAM
000133 d0d5                      		rcall	LCDWrite
000134 c00d                      		RJMP	END_CHOICE2
                                 
                                 
                                 PRINT_PAPER1:
000135 e9ec                      		ldi		ZL, LOW(STRING_PAPER_1 << 1)
000136 e0f3                      		ldi		ZH, HIGH(STRING_PAPER_1 << 1)
000137 e1c0                      		ldi		YL, LOW(0x0110)					; Line 1 SRAM address
000138 e0d1                      		ldi		YH, HIGH(0x0110)
000139 d06d                      		rcall	CopyToSRAM
00013a d0ce                      		rcall	LCDWrite
00013b c006                      		RJMP	END_CHOICE2
                                 
                                 PRINT_SCISSORS1:
00013c eae2                      		ldi		ZL, LOW(STRING_SCISSORS_2 << 1)
00013d e0f3                      		ldi		ZH, HIGH(STRING_SCISSORS_2 << 1)
00013e e1c0                      		ldi		YL, LOW(0x0110)					; Line 1 SRAM address
00013f e0d1                      		ldi		YH, HIGH(0x0110)
000140 d066                      		rcall	CopyToSRAM
000141 d0c7                      		rcall	LCDWrite
                                 
                                 END_CHOICE2:
000142 3090                      		cpi		Counter2, 0
000143 f029                      		breq	Continue1
                                 
000144 e004                      		ldi		mpr, 4
000145 d03a                      		rcall	Count_Down
                                 
000146 3091                      		cpi		Counter2, 1
000147 f409                      		brne	Continue1
000148 d00a                      		rcall	COMPARE_RPS
                                 Continue1:
000149 3090                      		cpi		Counter2, 0
00014a f421                      		brne	Continue2
00014b 2733                      		clr		ready_flag;, 0x00
00014c 2722                      		clr		gesture_send;, 0x00
00014d 2777                      		clr		gesture_receive;, 0x00
                                 
                                 
                                 
00014e cf07                      		rjmp	INIT
                                 
                                 
                                 Continue2:
00014f 959a                      		dec		Counter2
000150 911f                      		pop		temp
000151 910f                      		pop		mpr
                                 
000152 9508                      		ret
                                 
                                 
                                 
                                 ;-----------------------------------------------------------
                                 ; Func: 
                                 ; Desc: 
                                 ;		
                                 ;-----------------------------------------------------------
                                 COMPARE_RPS:
000153 d0ce                      		rcall	LCDClr
000154 1772                      		cp		gesture_receive, gesture_send		; Compare player's gesture with opponent's
000155 f0e9                      		breq	DISPLAY_DRAW						; If equal, it's a draw
                                 
                                     ; Check player's win conditions
000156 3021                      		cpi		gesture_send, ROCK_CODE
000157 f021                      		breq	CHECK_ROCK
                                 
000158 3022                      		cpi		gesture_send, PAPER_CODE
000159 f029                      		breq	CHECK_PAPER
                                 
00015a 3023                      		cpi		gesture_send, SCISSORS_CODE
00015b f031                      		breq	CHECK_SCISSORS
                                 
                                 CHECK_ROCK:
00015c 3073                      		cpi		gesture_receive, SCISSORS_CODE		; Rock beats Scissors
00015d f039                      		breq	DISPLAY_WIN
00015e c00d                      		rjmp	DISPLAY_LOSE						; Otherwise, player loses
                                 
                                 CHECK_PAPER:
00015f 3071                      		cpi		gesture_receive, ROCK_CODE      ; Paper beats Rock
000160 f021                      		breq	DISPLAY_WIN
000161 c00a                      		rjmp	DISPLAY_LOSE					; Otherwise, player loses
                                 
                                 CHECK_SCISSORS:
000162 3072                      		cpi		gesture_receive, PAPER_CODE		; Scissors beat Paper
000163 f009                      		breq	DISPLAY_WIN
000164 c007                      		rjmp	DISPLAY_LOSE					; Otherwise, player loses
                                 
                                 DISPLAY_WIN:
                                 		; Load "You Win" message and display it
000165 eaec                      		ldi		ZL, LOW(STRING_WIN << 1)
000166 e0f3                      		ldi		ZH, HIGH(STRING_WIN << 1)
000167 e0c0                      		ldi		YL, LOW(0x0100)					; Line 1 SRAM address
000168 e0d1                      		ldi		YH, HIGH(0x0100)
000169 d03d                      		rcall	CopyToSRAM
00016a d09e                      		rcall	LCDWrite
00016b c00d                      		rjmp	END_COMPARE
                                 
                                 DISPLAY_LOSE:
                                 		; Load "You Lose" message and display it
00016c ebe6                      		ldi		ZL, LOW(STRING_LOSE << 1)
00016d e0f3                      		ldi		ZH, HIGH(STRING_LOSE << 1)
00016e e0c0                      		ldi		YL, LOW(0x0100)					; Line 1 SRAM address
00016f e0d1                      		ldi		YH, HIGH(0x0100)
000170 d036                      		rcall	CopyToSRAM
000171 d097                      		rcall	LCDWrite
000172 c006                      		rjmp	END_COMPARE
                                 
                                 DISPLAY_DRAW:
                                 		; Load "Draw" message and display it
000173 ece0                      		ldi		ZL, LOW(STRING_DRAW << 1)
000174 e0f3                      		ldi		ZH, HIGH(STRING_DRAW << 1)
000175 e0c0                      		ldi		YL, LOW(0x0100)					; Line 1 SRAM address
000176 e0d1                      		ldi		YH, HIGH(0x0100)
000177 d02f                      		rcall	CopyToSRAM
000178 d090                      		rcall	LCDWrite
                                 
                                 END_COMPARE:
                                 
000179 9508                      		ret
                                 
                                 
                                 
                                 
                                 
                                 ;-----------------------------------------------------------
                                 ; Func: Display Bits
                                 ; Desc: 
                                 ;		
                                 ;-----------------------------------------------------------
                                 Display_Bits:
00017a 7f00                      		andi	mpr, 0xF0		; Mask lower 4 bits as LCD use PB3:0
                                 
00017b b115                      		in		temp, PORTB		; Load current PortB value to temp
00017c 701f                      		andi	temp, 0x0F		; Mask higher 4 bits
                                 
00017d 2b01                      		or		mpr, temp		;  Combine those remaining bits
00017e b905                      		out		PORTB, mpr		; Print the values
                                 
00017f 9508                      		ret
                                 
                                 
                                 ;-----------------------------------------------------------
                                 ; Func: 
                                 ; Desc: 
                                 ;		
                                 ;-----------------------------------------------------------
                                 Count_Down:
                                     
000180 e084                      		ldi		counter, 4				; Set countdown value (4 steps for LEDs)
000181 ef00                      		ldi		mpr, 0b11110000			; Initial LED pattern (PB7-PB4)
000182 b905                      		out		PORTB, mpr				; Display initial LEDs
                                 
                                 		; Enable Timer/Counter1 Overflow Interrupt
000183 e001                      		ldi		mpr, (1 << TOIE1)		; Set Timer/Counter1 overflow interrupt enable
000184 9300 006f                 		sts		TIMSK1, mpr
                                 
                                 		; Load preload value for 1.5 seconds
000186 e408                      		ldi		mpr, PRELOAD_HIGH
000187 9300 0085                 		sts		TCNT1H, mpr
000189 ee05                      		ldi		mpr, PRELOAD_LOW
00018a 9300 0084                 		sts		TCNT1L, mpr
                                 	
00018c 9508                      		ret
                                 
                                 
                                 
                                 ;-----------------------------------------------------------
                                 ; Func: 
                                 ; Desc: 
                                 ;		
                                 ;-----------------------------------------------------------
                                 WAIT_1_Half:
00018d 930f                      		push	mpr
00018e 931f                      		push	temp
                                 
                                 		; Shift LEDs
00018f b105                      		in		mpr, PORTB				; Load current LED state
000190 9506                      		lsr		mpr						; Shift LEDs to the right
000191 b905                      		out		PORTB, mpr				; Update LEDs
                                 
                                 		; Decrement counter
000192 958a                      		dec		counter
000193 2388                      		tst		counter				; Test if counter == 0
000194 f449                      		brne	TIMER_CONTINUE		; If not zero, continue countdown
                                 
                                 		; Countdown finished
000195 2700                      		clr		mpr					; Clear LEDs
000196 b905                      		out		PORTB, mpr
                                 
                                 		; Disable Timer/Counter1 Overflow Interrupt
000197 e000                      		ldi		mpr, 0x00
000198 9300 006f                 		sts		TIMSK1, mpr
                                 
                                 
                                 		; Transmit gesture to the other board
                                 		;rcall	USART_Transmit      ; Send gesture_send to other board
                                 
                                 
00019a df6b                      		rcall	Display_Top_Choices
00019b df8a                      		rcall	Display_Bottom_Choices
                                 
                                 		; Set flag indicating transmission complete
00019c e031                      		ldi		ready_flag, 1
                                 
00019d c006                      		rjmp	DONE2
                                 
                                 
                                 
                                 
                                 TIMER_CONTINUE:
                                 		; Reload timer preload value for 1.5-second delay
00019e e408                      		ldi		mpr, PRELOAD_HIGH
00019f 9300 0085                 		sts		TCNT1H, mpr
0001a1 ee05                      		ldi		mpr, PRELOAD_LOW
0001a2 9300 0084                 		sts		TCNT1L, mpr
                                 
                                 
                                 DONE2:
0001a4 911f                      		pop		temp
0001a5 910f                      		pop		mpr
                                 
0001a6 9508                      		ret
                                 ;-----------------------------------------------------------
                                 ; Func: CopyToSRAM
                                 ; Desc: Copies a string from Program Memory to Data Memory
                                 ;-----------------------------------------------------------
                                 CopyToSRAM:
                                 
0001a7 9105                      		lpm		mpr, Z+				; Load a byte from program memory
                                 									; Pointer register r30 increment
0001a8 9309                      		st		Y+, mpr				; Store the byte into SRAM
0001a9 2300                      		tst		mpr					; Check if end of string (null terminator)
0001aa f7e1                      		brne	CopyToSRAM			; If not end, continue copying
                                 
0001ab 9508                      		ret							; Return when done
                                 
                                 ;***********************************************************
                                 ;*	Stored Program Data
                                 ;***********************************************************
                                 
                                 
                                 
                                 
                                 ;-----------------------------------------------------------
                                 ; An example of storing a string. Note the labels before and
                                 ; after the .DB directive; these can help to access the data
                                 ;-----------------------------------------------------------
                                 STRING_START1:
0001ac 6557
0001ad 636c
0001ae 6d6f
0001af 2165
0001b0 0020                      .DB		"Welcome! ", 0		; Declaring data in ProgMem
                                 STRING_START2:
0001b1 6c50
0001b2 6165
0001b3 6573
0001b4 7020
0001b5 6572
0001b6 7373
0001b7 5020
0001b8 3744
0001b9 0020                      .DB		"Please press PD7 ", 0
                                 STRING_START3:
0001ba 7453
0001bb 7261
0001bc 2074
0001bd 6147
0001be 656d
0001bf 003a                      .DB		"Start Game:", 0
                                 STRING_START4:
0001c0 6157
0001c1 7469
0001c2 6e69
0001c3 2067
0001c4 6f66
0001c5 2072
0001c6 704f
0001c7 6f70
0001c8 656e
0001c9 746e
0001ca 0021                      .DB		"Waiting for Opponent!", 0
                                 
                                 STRING_ROCK_0:
0001cb 4f52
0001cc 4b43
0001cd 0020                      .DB		"ROCK ", 0
                                 STRING_PAPER_1:
0001ce 4150
0001cf 4550
0001d0 0052                      .DB		"PAPER", 0
                                 STRING_SCISSORS_2:
0001d1 4353
0001d2 5349
0001d3 4f53
0001d4 5352
0001d5 0020                      .DB		"SCISSORS ", 0
                                 STRING_WIN:
0001d6 4f59
0001d7 2055
0001d8 4957
0001d9 214e
0001da 0020                      .DB		"YOU WIN! ", 0
                                 STRING_LOSE:
0001db 4f59
0001dc 2055
0001dd 4f4c
0001de 4553
0001df 0020                      .DB		"YOU LOSE ", 0
                                 STRING_DRAW:
0001e0 5244
0001e1 5741
0001e2 0020                      .DB		"DRAW ", 0
                                 STRING_END:
                                 
                                 ;***********************************************************
                                 ;*	Additional Program Includes
                                 ;***********************************************************
                                 .include "LCDDriver.asm"		; Include the LCD Driver
                                 
                                  * LCDDriver.asm
                                  *
                                  *  Created: 11/7/2024 11:19:24 PM
                                  *   Author: Anguyen2057
                                  */ 
                                 
                                 
                                  /*
                                  * AsmFile1.asm
                                  *
                                  *  Created: 10/28/2024 10:09:44 PM
                                  *   Author: Anguyen2057
                                  */ 
                                 
                                 
                                  ;*********************************************************************
                                 ;*	Oregon State University
                                 ;*	ST7565R LCD Driver
                                 ;*	This code configures the graphical LCD and emulates
                                 ;*	the behavior of a 2x16 character display.
                                 ;*
                                 ;*	The LCD has room for 32 characters in total
                                 ;*	(16 on the top and 16 on the bottom).
                                 ;*	The upper 16 characters should be located in SRAM starting at 0x0100.
                                 ;*	The lower 16 characters should be located in SRAM starting at 0x0110.
                                 ;*
                                 ;*	NOTE: Register r16 MUST be named 'mpr' in the Main Code
                                 ;*	Something like this:
                                 ;*	.def	mpr = r16
                                 ;*
                                 ;*	WARNING: Register r20-r22 are reserved and cannot be
                                 ;*		renamed outside of the LCD Driver functions. Doing
                                 ;*		so will damage the functionality of the LCD Driver
                                 ;*
                                 ;*	Acknowledgements: the Bin2ASCII and div10 procedures were written by
                                 ;*	David Zier for a previous board. The code has been retained intact.
                                 ;*
                                 ;*********************************************************************
                                 ;*	Rev	Date		Name			Description
                                 ;*--------------------------------------------------------------------
                                 ;*	-	8/18/22	Justin Goins	Version 1.0
                                 ;*
                                 ;*
                                 ;*********************************************************************
                                 
                                 .include "m32U4def.inc"				; Include definition file
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega32U4.xml **********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m32U4def.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega32U4
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega32U4
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M32U4DEF_INC_
                                 #endif  /* _M32U4DEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 
                                 ; Register definitions
                                 .def	count = r20			; Character Counter
                                 .def	q = r21			; Quotient for div10
                                 .def	r = r22			; Remander for div10
                                 
                                 ; The following constants are not intended to be modified.
                                 .equ	lcd_buffer_addr = 0x0100 ; define the SRAM base address of the LCD buffer
                                 
                                 ; This information is gathered from the ST7565R datasheet.
                                 ; define some command patterns
                                 .equ	lcd_c_disp_en = 0b10101110 ; lsb indicates whether the LCD is on (1) or off (0)
                                 .equ	lcd_c_disp_set_start_ln = 0b01000000 ; lower 6 bits indicate the line index (0 - 63)
                                 .equ	lcd_c_disp_set_page_addr = 0b10110000 ; lower 4 bits indicate the page address (page 3 is at top and page 0 is at bottom)
                                 ; together, these commands allow you to specify a column index from (0 - 131):
                                 .equ	lcd_c_disp_set_col_addr_h = 0b00010000 ; lower 4 bits indicate the 4 high bits of the column address
                                 .equ	lcd_c_disp_set_col_addr_l = 0b00000000 ; lower 4 bits indicate the 4 low bits of the column address
                                 .equ	lcd_c_disp_set_invert = 0b10100110 ; lsb indicates whether the LCD is normal (0) or inverted (1)
                                 .equ	lcd_c_disp_fill = 0b10100100 ; lsb indicates whether the LCD is normal (0) or filled with dots (1)
                                 .equ	lcd_c_disp_reset = 0b11100010 ; resets the line/page addresses and other stuff, does not affect data RAM
                                 .equ	lcd_c_disp_set_bias = 0xA2 ; 1/6 bias (in 1/33 duty mode)
                                 .equ	lcd_c_disp_set_scandir = 0b11000000 ; select normal scan direction (most significant bit is placed at top of LCD)
                                 .equ	lcd_c_disp_set_contrast_1 = 0b10000001 ; first we send this command then we pass the value
                                 .equ	lcd_c_disp_set_contrast_2 = 15 ; can select a contrast value between 1 and 63
                                 .equ	lcd_c_disp_set_res_ratio = 0x22 ; see the datasheet
                                 .equ	lcd_c_disp_vreg_on = 0x2F ; enable voltage booster, voltage regulator, and voltage follower
                                 
                                 ; use this command to write into the LCD RAM:
                                 .equ	lcd_c_disp_write = 0b00000000 ; these 8 bits are the data to be placed in the target. 
                                 ; note that the column address is automatically incremented by 1 after each write to the LCD data
                                 
                                 ; everything in this driver file needs to go into the code segment
                                 .cseg
                                 
                                 ;*****************************************************************
                                 ;* Func:	LCDInit
                                 ;* Desc:	This function initializes the LCD control pins and
                                 ;*		sets reasonable values for the configuration registers.
                                 ;*****************************************************************
                                 LCDInit:
0001e3 930f                      	push	mpr
                                 
                                 	; set MOSI, SCL, and SS as outputs
0001e4 9a22                      	sbi	DDRB, DDB2	; Port B 2
0001e5 9a21                      	sbi	DDRB, DDB1	; Port B 1
0001e6 9a20                      	sbi	DDRB, DDB0	; Port B 0
                                 	; ensure that SS is deactivated (active low)
0001e7 9a28                      	sbi	PORTB, 0
                                 	; set lcd_A0 as output
0001e8 9a81                      	sbi	DDRF, DDF1	; Port F 1
                                 	; enable LCD backlight control
0001e9 9a3f                      	sbi	DDRC, DDC7	; Port C 7
                                 	; set lcd_RST_N as output
0001ea 9a80                      	sbi	DDRF, DDF0	; Port F 0
                                 	; we pull lcd_RST_N low for 1 millisecond
0001eb 9888                      	cbi	PORTF, 0
0001ec 940e 02ce                 	call	LCDDelay
0001ee 9a88                      	sbi	PORTF, 0
                                 	; Enable SPI mode 3, master configuration, set clock rate fck/2 using SPI2X
0001ef e50c                      	ldi	mpr, (1<<SPE)|(1<<MSTR)|(1<<CPOL)|(1<<CPHA)
0001f0 bd0c                      	out	SPCR, mpr
0001f1 e001                      	ldi	mpr, (1<<SPI2X)
0001f2 bd0d                      	out	SPSR, mpr
                                 	; Note: after transmitting a byte, the SPI interrupt flag will
                                 	; be automatically cleared next time we: 1) read SPSR and ALSO 2) access SPDR
                                 
0001f3 9828                      	cbi	PORTB, 0	; activate slave select
                                 	; send a string of initialization commands
0001f4 ea02                      	ldi	mpr, lcd_c_disp_set_bias
0001f5 d0d2                      	rcall	LCD_Internal_WriteCMD
0001f6 ec00                      	ldi	mpr, lcd_c_disp_set_scandir
0001f7 d0d0                      	rcall	LCD_Internal_WriteCMD
0001f8 e801                      	ldi	mpr, lcd_c_disp_set_contrast_1
0001f9 d0ce                      	rcall	LCD_Internal_WriteCMD
0001fa e00f                      	ldi	mpr, lcd_c_disp_set_contrast_2
0001fb d0cc                      	rcall	LCD_Internal_WriteCMD
0001fc e202                      	ldi	mpr, lcd_c_disp_set_res_ratio
0001fd d0ca                      	rcall	LCD_Internal_WriteCMD
0001fe e20f                      	ldi	mpr, lcd_c_disp_vreg_on
0001ff d0c8                      	rcall	LCD_Internal_WriteCMD
000200 ea0f                      	ldi	mpr, (lcd_c_disp_en | 1 << 0)
000201 d0c6                      	rcall	LCD_Internal_WriteCMD
000202 9a28                      	sbi	PORTB, 0	; deactivate slave select
                                 
000203 910f                      	pop	mpr
000204 9508                      	ret
                                 
                                 ;*****************************************************************
                                 ;* Func:	LCDBacklightOn
                                 ;* Desc:	Enables the backlight
                                 ;*****************************************************************
                                 LCDBacklightOn:
000205 9a47                      	sbi	PORTC, 7
000206 9508                      	ret
                                 
                                 ;*****************************************************************
                                 ;* Func:	LCDBacklightOff
                                 ;* Desc:	Disables the backlight
                                 ;*****************************************************************
                                 LCDBacklightOff:
000207 9847                      	cbi	PORTC, 7
000208 9508                      	ret
                                 
                                 ;*****************************************************************
                                 ;* Func:	LCDWrite
                                 ;* Desc:	This function writes 32 characters to the LCD screen...
                                 ;*		16 chars on the top line and 16 chars on the bottom line.
                                 ;*****************************************************************
                                 LCDWrite:
000209 d002                      	rcall	LCDWrLn1
00020a d00c                      	rcall	LCDWrLn2
00020b 9508                      	ret
                                 
                                 ;*****************************************************************
                                 ;* Func:	LCDWrLn1
                                 ;* Desc:	This function writes 16 characters to the top line.
                                 ;*****************************************************************
                                 LCDWrLn1:
00020c 93bf                      	push	XH
00020d 93af                      	push	XL
00020e 931f                      	push	r17
                                 	; r17 specifies the destination bank in LCD RAM
00020f e013                      	ldi	r17, 3
                                 	; point X at the ASCII data
000210 e0b1                      	ldi	XH, HIGH(lcd_buffer_addr)
000211 e0a0                      	ldi	XL, LOW(lcd_buffer_addr)
000212 d05c                      	rcall	LCD_Internal_WriteLn
000213 911f                      	pop	r17
000214 91af                      	pop	XL
000215 91bf                      	pop	XH
000216 9508                      	ret
                                 
                                 ;*****************************************************************
                                 ;* Func:	LCDWrLn2
                                 ;* Desc:	This function writes 16 characters to the bottom line.
                                 ;*****************************************************************
                                 LCDWrLn2:
000217 93bf                      	push	XH
000218 93af                      	push	XL
000219 931f                      	push	r17
                                 	; r17 specifies the destination bank in LCD RAM
00021a e011                      	ldi	r17, 1
                                 	; point X at the ASCII data
00021b e0b1                      	ldi	XH, HIGH(lcd_buffer_addr+16)
00021c e1a0                      	ldi	XL, LOW(lcd_buffer_addr+16)
00021d d051                      	rcall	LCD_Internal_WriteLn
00021e 911f                      	pop	r17
00021f 91af                      	pop	XL
000220 91bf                      	pop	XH
000221 9508                      	ret
                                 
                                 ;*****************************************************************
                                 ;* Func:	LCDClr
                                 ;* Desc:	This function clears the entire LCD screen.
                                 ;*****************************************************************
                                 LCDClr:
000222 d022                      	rcall	LCDClrLn1
000223 d027                      	rcall	LCDClrLn2
                                 
000224 9508                      	ret
                                 
                                 ;*****************************************************************
                                 ;* Func:	CLRDM1
                                 ;* Desc:	This function clears Data Memory by writing 16 
                                 ;*		consecutive ASCII spaces $20 to the memory at $0100.
                                 ;*****************************************************************
                                 CLRDM1:
                                     ; Set X register points to $0100
000225 93bf                      	   push	   XH
000226 93af                      	   PUSH	   XL
000227 930f                                 push    r16
000228 931f                                 push    r17
                                 
000229 e0b1                                 ldi     XH, HIGH(lcd_buffer_addr)
00022a e0a0                                 ldi     XL, LOW(lcd_buffer_addr)
00022b e110                                 ldi     r17, 16
00022c e200                                 ldi     r16, ' '
                                    CLRloop1:
00022d 930d                                 st      X+, r16         ; load data to DM
00022e 951a                                 dec     r17
00022f f7e9                                 brne    CLRloop1
                                 
000230 911f                      	   pop	   r17
000231 910f                      	   pop	   r16
000232 91af                      	   pop	   XL
000233 91bf                      	   pop	   XH
                                 
000234 9508                                 ret
                                 
                                 ;*****************************************************************
                                 ;* Func:	CLRDM2
                                 ;* Desc:	This function clears Data Memory by writing 16 
                                 ;*		consecutive ASCII spaces $20 to the memory at $0110.
                                 ;*****************************************************************
                                 CLRDM2:
                                     ; Set X register points to $0110
000235 93bf                      	   push	   XH
000236 93af                      	   PUSH	   XL
000237 930f                                 push    r16
000238 931f                                 push    r17
                                 
000239 e0b1                                 ldi     XH, HIGH(lcd_buffer_addr+16)
00023a e1a0                                 ldi     XL, LOW(lcd_buffer_addr+16)
00023b e110                                 ldi     r17, 16
00023c e200                                 ldi     r16, ' '
                                    CLRloop2:
00023d 930d                                 st      X+, r16         ; load data to DM
00023e 951a                                 dec     r17
00023f f7e9                                 brne    CLRloop2
                                 
000240 911f                      	   pop	   r17
000241 910f                      	   pop	   r16
000242 91af                      	   pop	   XL
000243 91bf                      	   pop	   XH
                                 
000244 9508                                 ret
                                 ;*****************************************************************
                                 ;* Func:	LCDClrLn1
                                 ;* Desc:	This function clears the top line of the LCD screen.
                                 ;*****************************************************************
                                 LCDClrLn1:
000245 931f                      	push	r17
                                 	; r17 specifies the target bank in LCD RAM
000246 e013                      	ldi	r17, 3
000247 d060                      	rcall	LCD_Internal_ClearLn
000248 dfdc                      	rcall	CLRDM1
000249 911f                      	pop	r17
00024a 9508                      	ret
                                 
                                 ;*****************************************************************
                                 ;* Func:	LCDClrLn2
                                 ;* Desc:	This function clears the bottom line of the LCD screen.
                                 ;*****************************************************************
                                 LCDClrLn2:
00024b 931f                      	push	r17
                                 	; r17 specifies the target bank in LCD RAM
00024c e011                      	ldi	r17, 1
00024d d05a                      	rcall	LCD_Internal_ClearLn
00024e dfe6                      	rcall	CLRDM2
00024f 911f                      	pop	r17
000250 9508                      	ret
                                 
                                 ;*****************************************************************
                                 ;* Func:	Bin2ASCII
                                 ;* Desc:	Converts a binary number into an ASCII 
                                 ;*			text string equivalent. 
                                 ;*			- The binary number needs to be in the mpr
                                 ;*			- The Start Address of where the text will
                                 ;*			 	be placed needs to be in the X Register
                                 ;*			- The count of the characters created are 
                                 ;*				added to the count register
                                 ;*****************************************************************
                                 Bin2ASCII:
000251 930f                      	push	mpr			; save mpr
000252 936f                      	push	r			; save r
000253 935f                      	push	q			; save q
000254 93bf                      	push	XH			; save X-pointer
000255 93af                      	push	XL			;
                                 
                                 	; Determine the range of mpr
000256 3604                      	cpi	mpr, 100		; is mpr >= 100
000257 f018                      	brlo	B2A_1			; goto next check
000258 e043                      	ldi	count, 3		; Three chars are written
000259 9613                      	adiw	XL, 3			; Increment X 3 address spaces
00025a c007                      	rjmp	B2A_3			; Continue with program
                                 B2A_1:
00025b 300a                      	cpi	mpr, 10		; is mpr >= 10
00025c f018                      	brlo	B2A_2			; Continue with program
00025d e042                      	ldi	count, 2		; Two chars are written
00025e 9612                      	adiw	XL, 2			; Increment X 2 address spaces
00025f c002                      	rjmp	B2A_3			; Continue with program
                                 B2A_2:
000260 9611                      	adiw	XL, 1			; Increment X 1 address space
000261 e041                      	ldi	count, 1		; One char is written
                                 
                                 B2A_3:
                                 	; Do-While statement that converts Binary to ASCII
000262 d076                      	rcall	div10			; Call the div10 function
000263 e300                      	ldi	mpr, '0'		; Set the base ASCII integer value
000264 0f06                      	add	mpr, r		; Create the ASCII integer value
000265 930e                      	st	-X, mpr		; Load ASCII value to memory
000266 2f05                      	mov	mpr, q		; Set mpr to quotient value
000267 3000                      	cpi	mpr, 0		; does mpr == 0
000268 f7c9                      	brne	B2A_3			; do while (mpr != 0)
                                 
000269 91af                      	pop	XL			; restore X-pointer
00026a 91bf                      	pop	XH			;
00026b 915f                      	pop	q			; restore q
00026c 916f                      	pop	r			; restore r
00026d 910f                      	pop	mpr			; restore mpr
00026e 9508                      	ret				; return from function
                                 
                                 ;*****************************************************************
                                 ;*	The functions below here are intended for internal use only.
                                 ;*****************************************************************
                                 
                                 ;*****************************************************************
                                 ;* Func:	LCD_Internal_WriteLn
                                 ;* Desc:	Sends 16 characters of information to the LCD panel
                                 ;*		This is slightly more complicated than it sounds because the
                                 ;*		characters straddle two banks of the LCD memory.
                                 ;*		X is pointing at the first ASCII character to be displayed.
                                 ;*		r17 holds the index of the destination bank in LCD RAM.
                                 ;*		
                                 ;*****************************************************************
                                 LCD_Internal_WriteLn:
00026f 920f                      	push	r0
000270 921f                      	push	r1
000271 930f                      	push	mpr
000272 932f                      	push	r18
000273 933f                      	push	r19
000274 938f                      	push	r24
000275 939f                      	push	r25
000276 93ef                      	push	ZL
000277 93ff                      	push	ZH
                                 
                                 	; r25:24 holds a pointer to the base address of the bitmap array
000278 e095                      	ldi	r25, HIGH(FontBitmap << 1);
000279 ef8e                      	ldi	r24, LOW(FontBitmap << 1);
                                 
00027a 9828                      	cbi	PORTB, 0	; activate slave select
                                 
                                 	; use a counter to track if we are on the top chunk or bottom chunk of each char
00027b e022                      	ldi	r18, 2
                                 
                                 LCD_WL_display_bank:
                                 	; set the column to 0
00027c e100                      	ldi	mpr, lcd_c_disp_set_col_addr_h
00027d d04a                      	rcall	LCD_Internal_WriteCMD
00027e e000                      	ldi	mpr, lcd_c_disp_set_col_addr_l
00027f d048                      	rcall	LCD_Internal_WriteCMD
                                 	; we need to select the appropriate page
000280 eb00                      	ldi	mpr, lcd_c_disp_set_page_addr
000281 2b01                      	or	mpr, r17	; set the lower 4 bits
000282 d045                      	rcall	LCD_Internal_WriteCMD
                                 
000283 e130                      	ldi	r19, 16	; there are 16 characters per line
                                 
                                 LCD_WL_next_char:
                                 	; get ascii code point & determine location of corresponding character bitmap
000284 900d                      	ld	r0, X+	; this should be a value from 0 to 255
000285 e100                      	ldi	mpr, 16	; there are 16 bytes per character
000286 9e00                      	mul	r0, mpr	; determine the byte offset for the desired char
000287 01fc                      	movw	ZH:ZL, r25:r24	; copy the base address to Z
000288 0de0                      	add	ZL, r0	; finally, compute a pointer to the char bitmap
000289 1df1                      	adc	ZH, r1
                                 
00028a e008                      	ldi	mpr, 8	; there are 8 columns for each character
                                 
                                 	; this is where we display the chunk of character (either a top chunk or bottom chunk)
00028b 9004                      	lpm	r0, Z
                                 LCD_WL_next_col:
00028c bc0e                      	out	SPDR, r0
00028d 9a89                      	sbi	PORTF, 1	; set lcd_A0 to specify data mode
00028e 9632                      	adiw	ZH:ZL, 2	; point Z at the next column for this bank
00028f 9004                      	lpm	r0, Z		; this is a sneaky way to save a few clock cycles (since we are waiting for the SPI communication)
                                 LCD_WL_wait_spi:
000290 b41d                      	in	r1, SPSR
000291 fe17                      	sbrs	r1, SPIF	; wait for SPI to finish
000292 cffd                      	rjmp	LCD_WL_wait_spi
                                 
                                 	; keep going until we have displayed all the columns for this character
000293 950a                      	dec	mpr
000294 f7b9                      	brne	LCD_WL_next_col
                                 
                                 	; move to the next character
000295 953a                      	dec	r19
000296 f769                      	brne	LCD_WL_next_char
                                 
                                 	; if we are at the end of the line, configure the bank and starting array offset for the bottom half of each char
000297 952a                      	dec	r18		; did we display both banks yet?
000298 f021                      	breq	LCD_WL_all_done
                                 	; if not, then prepare to display the bottom chunk of each character
000299 951a                      	dec	r17		; decrement the bank number
00029a 9750                      	sbiw	XH:XL, 16	; X needs to point back at the beginning character of the line
00029b 9601                      	adiw	r25:r24, 1	; increment the base address pointer (now it will point to the second chunk of each char)
00029c cfdf                      	rjmp	LCD_WL_display_bank
                                 
                                 LCD_WL_all_done:
00029d 9a28                      	sbi	PORTB, 0	; deactivate slave select
                                 
00029e 91ff                      	pop	ZH
00029f 91ef                      	pop	ZL
0002a0 919f                      	pop	r25
0002a1 918f                      	pop	r24
0002a2 913f                      	pop	r19
0002a3 912f                      	pop	r18
0002a4 910f                      	pop	mpr
0002a5 901f                      	pop	r1
0002a6 900f                      	pop	r0
0002a7 9508                      	ret
                                 
                                 ;*****************************************************************
                                 ;* Func:	LCD_Internal_ClearLn
                                 ;* Desc:	This function clears two of the LCD memory banks.
                                 ;*		r17 specifies the starting bank to wipe.
                                 ;*****************************************************************
                                 LCD_Internal_ClearLn:
0002a8 930f                      	push	mpr
0002a9 921f                      	push	r1
0002aa 932f                      	push	r18
0002ab 933f                      	push	r19
                                 
0002ac 9828                      	cbi	PORTB, 0	; activate slave select
0002ad e032                      	ldi	r19, 2	; we are going to clear two banks
                                 
                                 LCD_CLRLN_clear_bank:
                                 	; set the column to 0
0002ae e100                      	ldi	mpr, lcd_c_disp_set_col_addr_h
0002af d018                      	rcall	LCD_Internal_WriteCMD
0002b0 e000                      	ldi	mpr, lcd_c_disp_set_col_addr_l
0002b1 d016                      	rcall	LCD_Internal_WriteCMD
                                 	; we need to select the appropriate page
0002b2 eb00                      	ldi	mpr, lcd_c_disp_set_page_addr
0002b3 2b01                      	or	mpr, r17	; configure the lower 4 bits
0002b4 d013                      	rcall	LCD_Internal_WriteCMD
                                 
0002b5 e820                      	ldi	r18, 128	; there are 128 columns on the LCD
0002b6 2700                      	clr	mpr		; we will fill each column with empty dots (i.e. blank space)
0002b7 9a89                      	sbi	PORTF, 1	; set lcd_A0 to specify data mode
                                 
                                 LCD_CLRLN_write_col:
0002b8 bd0e                      	out	SPDR, mpr	; send an empty column to the LCD via SPI
                                 LCD_CLRLN_wait_spi:
0002b9 b41d                      	in	r1, SPSR
0002ba fe17                      	sbrs	r1, SPIF	; wait for SPI to finish
0002bb cffd                      	rjmp	LCD_CLRLN_wait_spi
                                 
0002bc 952a                      	dec	r18
0002bd f7d1                      	brne	LCD_CLRLN_write_col	; cycle through all 128 columns
                                 
                                 	; clear the remaining bank if we haven't done so already
0002be 953a                      	dec	r19
0002bf f011                      	breq	LCD_CLRLN_all_done
0002c0 951a                      	dec	r17		; decrement the bank index
0002c1 cfec                      	rjmp	LCD_CLRLN_clear_bank
                                 
                                 LCD_CLRLN_all_done:
0002c2 9a28                      	sbi	PORTB, 0	; deactivate slave select	
                                 	
                                 	; pop registers...
0002c3 913f                      	pop	r19
0002c4 912f                      	pop	r18
0002c5 901f                      	pop	r1
0002c6 910f                      	pop	mpr
0002c7 9508                      	ret
                                 
                                 ;*****************************************************************
                                 ;* Func:	LCD_Internal_WriteCMD
                                 ;* Desc:	Sends the byte in mpr
                                 ;*		If you use this function directly,
                                 ;*		YOU ARE RESPONSIBLE for handling the slave select line!
                                 ;*****************************************************************
                                 LCD_Internal_WriteCMD:
0002c8 bd0e                      	out	SPDR, mpr	; initiate transmission
0002c9 9889                      	cbi	PORTF, 1	; clear lcd_A0 to put the lcd into command mode
                                 				; (this just has to be done before the 8th bit
                                 				; is transmitted via SPI)
                                 LCD_IWC_L1:
0002ca b50d                      	in	mpr, SPSR
0002cb ff07                      	sbrs	mpr, SPIF	; wait for SPI to finish
0002cc cffd                      	rjmp LCD_IWC_L1
0002cd 9508                      	ret
                                 
                                 ;*****************************************************************
                                 ;* Func:	LCDDelay
                                 ;* Desc:	A wait loop that will consume roughly 1ms
                                 ;*		Note that a CALL takes 4 cycles on top of this delay.
                                 ;*****************************************************************
                                 LCDDelay:
0002ce 930f                      	push	mpr		; 2 cycles
0002cf 931f                      	push	r17		; 2 cycles
0002d0 e01b                      	ldi	r17, 11	; 1 cycle
                                 LCDDelay_L1:
0002d1 ef02                      	ldi	mpr, 242	; 1 cycle
                                 LCDDelay_L2:
0002d2 950a                      	dec	mpr		; 1 cycle
0002d3 f7f1                      	brne	LCDDelay_L2	; 2 cycles on branch, 1 if no branch
0002d4 951a                      	dec	r17		; 1 cycle
0002d5 f7d9                      	brne	LCDDelay_L1	; 2 cycles on branch, 1 if no branch
0002d6 911f                      	pop	r17		; 2 cycles
0002d7 910f                      	pop	mpr		; 2 cycles
0002d8 9508                      	ret			; 4 cycles
                                 
                                 ;*****************************************************************
                                 ;* Func:	div10
                                 ;* Desc:	Divides the value in the mpr by 10 and 
                                 ;*			puts the remainder in the 'r' register
                                 ;*			and the quotient in the 'q' register.
                                 ;*	DO NOT modify this function, trust me, it does
                                 ;*	divide by 10 :)  ~DZ		
                                 ;*****************************************************************
                                 div10:
0002d9 920f                      	push	r0		; Save register
                                 
                                 	; q = mpr / 10 = mpr * 0.000110011001101b
0002da 2f50                      	mov	q, mpr	; q = mpr * 1.0b
0002db 9556                      	lsr	q		; q >> 2
0002dc 9556                      	lsr	q		; q = mpr * 0.01b
0002dd 0f50                      	add	q, mpr	; q = (q + mpr) >> 1
0002de 9556                      	lsr	q		; q = mpr * 0.101b
0002df 0f50                      	add	q, mpr	; q = (q + mpr) >> 3
0002e0 9556                      	lsr	q
0002e1 9556                      	lsr	q
0002e2 9556                      	lsr	q		; q = mpr * 0.001101b
0002e3 0f50                      	add	q, mpr	; q = (q + mpr) >> 1
0002e4 9556                      	lsr	q		; q = mpr * 0.1001101b
0002e5 0f50                      	add	q, mpr	; q = (q + mpr) >> 3
0002e6 9556                      	lsr	q				
0002e7 9556                      	lsr	q
0002e8 9556                      	lsr	q		; q = mpr * 0.0011001101b
0002e9 0f50                      	add	q, mpr	; q = (q + mpr) >> 1
0002ea 9556                      	lsr	q		; q = mpr * 0.10011001101b
0002eb 0f50                      	add	q, mpr	; q = (q + mpr) >> 4
0002ec 9556                      	lsr	q
0002ed 9556                      	lsr	q
0002ee 9556                      	lsr	q
0002ef 9556                      	lsr	q		; q = mpr * 0.000110011001101b
                                 
                                 	; compute the remainder as r = i - 10 * q
                                 	; calculate r = q * 10 = q * 1010b
0002f0 2f65                      	mov	r, q		; r = q * 1
0002f1 0f66                      	lsl	r		; r << 2
0002f2 0f66                      	lsl	r		; r = q * 100b
0002f3 0f65                      	add	r, q		; r = (r + q) << 1
0002f4 0f66                      	lsl	r		; r = q * 1010b
0002f5 2e06                      	mov	r0, r		; r0 = 10 * q
0002f6 2f60                      	mov	r, mpr	; r = mpr
0002f7 1960                      	sub	r, r0		; r = mpr - 10 * q
                                 
                                 	; Fix any errors that occur
                                 div10_1:
0002f8 306a                      	cpi	r, 10		; Compare with 10
0002f9 f018                      	brlo	div10_2	; do nothing if r < 10
0002fa 9553                      	inc	q		; fix quotient
0002fb 506a                      	subi	r, 10		; fix remainder
0002fc cffb                      	rjmp	div10_1	; Continue until error is corrected
                                 
                                 div10_2:
0002fd 900f                      	pop	r0		; Restore registers
0002fe 9508                      	ret			; Return from function
                                 
                                 ;*********************************************************************
                                 ;*	Bitmap Font Information
                                 ;*	Adapted into assembly code by Justin Goins.
                                 ;*	You can edit characters or add symbols if you choose (by modifying the data below)
                                 ;*	Each character is represented as a 8 x 16 pattern of dots (8 dots wide and 16 dots high).
                                 ;*	This implies that 16 bytes are allocated to represent each character.
                                 ;*
                                 ;*	The character information is arranged so that each line below equates to a single character.
                                 ;*	The first line is ASCII character 0, the next line is ASCII character 1,
                                 ;*	the next line is ASCII character 2, and so on.
                                 ;*	You can assign characters to any index within the extended ASCII range (0 to 255).
                                 ;*	With a bit of experimentation it's possible to define and display emojis (or any other graphical output).
                                 ;*	Be creative and have fun!
                                 ;*
                                 ;*	From original license file:
                                 ;*	Copyright 2011 Suraj N. Kurapati <https://github.com/sunaku/tamzen-font>
                                 ;*	Tamzen font is free.  You are hereby granted permission to use, copy, modify, and distribute it as you see fit.
                                 ;*	Tamzen font is provided "as is" without any express or implied warranty.
                                 ;*********************************************************************
                                 FontBitmap:
0002ff 0000
000300 f00f
000301 1008
000302 1008
000303 1008
000304 1008
000305 f00f
000306 0000                      .DB	0x00, 0x00, 0x0F, 0xF0, 0x08, 0x10, 0x08, 0x10, 0x08, 0x10, 0x08, 0x10, 0x0F, 0xF0, 0x00, 0x00	; U+0000
000307 fe03
000308 fa7f
000309 f683
00030a ea83
00030b d683
00030c aa83
00030d 567f
00030e fe03                      .DB	0x03, 0xFE, 0x7F, 0xFA, 0x83, 0xF6, 0x83, 0xEA, 0x83, 0xD6, 0x83, 0xAA, 0x7F, 0x56, 0x03, 0xFE	; U+E0A2
00030f 5455
000310 aaaa
000311 5455
000312 aaaa
000313 5455
000314 aaaa
000315 5455
000316 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; U+2592
000317 5455
000318 aaaa
000319 5455
00031a aaaa
00031b 5455
00031c aaaa
00031d 5455
00031e aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
00031f 5455
000320 aaaa
000321 5455
000322 aaaa
000323 5455
000324 aaaa
000325 5455
000326 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
000327 5455
000328 aaaa
000329 5455
00032a aaaa
00032b 5455
00032c aaaa
00032d 5455
00032e aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
00032f 5455
000330 aaaa
000331 5455
000332 aaaa
000333 5455
000334 aaaa
000335 5455
000336 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
000337 0000
000338 0007
000339 8008
00033a 8008
00033b 8008
00033c 0007
00033d 0000
00033e 0000                      .DB	0x00, 0x00, 0x07, 0x00, 0x08, 0x80, 0x08, 0x80, 0x08, 0x80, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00	; U+00B0
00033f 5455
000340 aaaa
000341 5455
000342 aaaa
000343 5455
000344 aaaa
000345 5455
000346 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
000347 5455
000348 aaaa
000349 5455
00034a aaaa
00034b 5455
00034c aaaa
00034d 5455
00034e aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
00034f 5455
000350 aaaa
000351 5455
000352 aaaa
000353 5455
000354 aaaa
000355 5455
000356 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
000357 8000
000358 8000
000359 8000
00035a 8000
00035b 80ff
00035c 0000
00035d 0000
00035e 0000                      .DB	0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00	; U+2518
00035f 8000
000360 8000
000361 8000
000362 8000
000363 fe00
000364 0000
000365 0000
000366 0000                      .DB	0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00	; U+2510
000367 0000
000368 0000
000369 0000
00036a 0000
00036b fe00
00036c 8000
00036d 8000
00036e 8000                      .DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFE, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80	; U+250C
00036f 0000
000370 0000
000371 0000
000372 0000
000373 80ff
000374 8000
000375 8000
000376 8000                      .DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80	; U+2514
000377 8000
000378 8000
000379 8000
00037a 8000
00037b feff
00037c 8000
00037d 8000
00037e 8000                      .DB	0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0xFF, 0xFE, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80	; U+253C
00037f 5455
000380 aaaa
000381 5455
000382 aaaa
000383 5455
000384 aaaa
000385 5455
000386 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
000387 5455
000388 aaaa
000389 5455
00038a aaaa
00038b 5455
00038c aaaa
00038d 5455
00038e aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
00038f 8000
000390 8000
000391 8000
000392 8000
000393 8000
000394 8000
000395 8000
000396 8000                      .DB	0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80	; U+2500
000397 5455
000398 aaaa
000399 5455
00039a aaaa
00039b 5455
00039c aaaa
00039d 5455
00039e aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
00039f 5455
0003a0 aaaa
0003a1 5455
0003a2 aaaa
0003a3 5455
0003a4 aaaa
0003a5 5455
0003a6 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
0003a7 0000
0003a8 0000
0003a9 0000
0003aa 0000
0003ab feff
0003ac 8000
0003ad 8000
0003ae 8000                      .DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFE, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80	; U+251C
0003af 8000
0003b0 8000
0003b1 8000
0003b2 8000
0003b3 feff
0003b4 0000
0003b5 0000
0003b6 0000                      .DB	0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0xFF, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00	; U+2524
0003b7 8000
0003b8 8000
0003b9 8000
0003ba 8000
0003bb 80ff
0003bc 8000
0003bd 8000
0003be 8000                      .DB	0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0xFF, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80	; U+2534
0003bf 8000
0003c0 8000
0003c1 8000
0003c2 8000
0003c3 fe00
0003c4 8000
0003c5 8000
0003c6 8000                      .DB	0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0xFE, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80	; U+252C
0003c7 0000
0003c8 0000
0003c9 0000
0003ca 0000
0003cb feff
0003cc 0000
0003cd 0000
0003ce 0000                      .DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00	; U+2502
0003cf 5455
0003d0 aaaa
0003d1 5455
0003d2 aaaa
0003d3 5455
0003d4 aaaa
0003d5 5455
0003d6 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
0003d7 5455
0003d8 aaaa
0003d9 5455
0003da aaaa
0003db 5455
0003dc aaaa
0003dd 5455
0003de aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
0003df 5455
0003e0 aaaa
0003e1 5455
0003e2 aaaa
0003e3 5455
0003e4 aaaa
0003e5 5455
0003e6 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
0003e7 5455
0003e8 aaaa
0003e9 5455
0003ea aaaa
0003eb 5455
0003ec aaaa
0003ed 5455
0003ee aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
0003ef 0000
0003f0 1001
0003f1 2001
0003f2 e007
0003f3 2009
0003f4 1009
0003f5 1008
0003f6 2004                      .DB	0x00, 0x00, 0x01, 0x10, 0x01, 0x20, 0x07, 0xE0, 0x09, 0x20, 0x09, 0x10, 0x08, 0x10, 0x04, 0x20	; U+00A3
0003f7 5455
0003f8 aaaa
0003f9 5455
0003fa aaaa
0003fb 5455
0003fc aaaa
0003fd 5455
0003fe aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
0003ff 0000
000400 0000
000401 0000
000402 0000
000403 0000
000404 0000
000405 0000
000406 0000                      .DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00	; U+0020
000407 0000
000408 0000
000409 0000
00040a 301f
00040b 0000
00040c 0000
00040d 0000
00040e 0000                      .DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00	; U+0021
00040f 0000
000410 0000
000411 001e
000412 0000
000413 0000
000414 001e
000415 0000
000416 0000                      .DB	0x00, 0x00, 0x00, 0x00, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00	; U+0022
000417 0000
000418 4002
000419 f00f
00041a 4002
00041b 4002
00041c f00f
00041d 4002
00041e 0000                      .DB	0x00, 0x00, 0x02, 0x40, 0x0F, 0xF0, 0x02, 0x40, 0x02, 0x40, 0x0F, 0xF0, 0x02, 0x40, 0x00, 0x00	; U+0023
00041f 0000
000420 0000
000421 2006
000422 2009
000423 3839
000424 2009
000425 c008
000426 0000                      .DB	0x00, 0x00, 0x00, 0x00, 0x06, 0x20, 0x09, 0x20, 0x39, 0x38, 0x09, 0x20, 0x08, 0xC0, 0x00, 0x00	; U+0024
000427 0000
000428 200c
000429 4012
00042a 8012
00042b 600d
00042c 9002
00042d 9004
00042e 6008                      .DB	0x00, 0x00, 0x0C, 0x20, 0x12, 0x40, 0x12, 0x80, 0x0D, 0x60, 0x02, 0x90, 0x04, 0x90, 0x08, 0x60	; U+0025
00042f 0000
000430 e00c
000431 1013
000432 1013
000433 900c
000434 6000
000435 6000
000436 9001                      .DB	0x00, 0x00, 0x0C, 0xE0, 0x13, 0x10, 0x13, 0x10, 0x0C, 0x90, 0x00, 0x60, 0x00, 0x60, 0x01, 0x90	; U+0026
000437 0000
000438 0000
000439 0000
00043a 001e
00043b 0000
00043c 0000
00043d 0000
00043e 0000                      .DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00	; U+0027
00043f 0000
000440 0000
000441 0000
000442 e003
000443 180c
000444 0410
000445 0000
000446 0000                      .DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xE0, 0x0C, 0x18, 0x10, 0x04, 0x00, 0x00, 0x00, 0x00	; U+0028
000447 0000
000448 0000
000449 0410
00044a 180c
00044b e003
00044c 0000
00044d 0000
00044e 0000                      .DB	0x00, 0x00, 0x00, 0x00, 0x10, 0x04, 0x0C, 0x18, 0x03, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00	; U+0029
00044f 0000
000450 8000
000451 a002
000452 c001
000453 c001
000454 a002
000455 8000
000456 0000                      .DB	0x00, 0x00, 0x00, 0x80, 0x02, 0xA0, 0x01, 0xC0, 0x01, 0xC0, 0x02, 0xA0, 0x00, 0x80, 0x00, 0x00	; U+002A
000457 0000
000458 8000
000459 8000
00045a 8000
00045b f007
00045c 8000
00045d 8000
00045e 8000                      .DB	0x00, 0x00, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x07, 0xF0, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80	; U+002B
00045f 0000
000460 0000
000461 0000
000462 3200
000463 3c00
000464 0000
000465 0000
000466 0000                      .DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0x00, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00	; U+002C
000467 0000
000468 8000
000469 8000
00046a 8000
00046b 8000
00046c 8000
00046d 8000
00046e 0000                      .DB	0x00, 0x00, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x00	; U+002D
00046f 0000
000470 0000
000471 0000
000472 3000
000473 3000
000474 0000
000475 0000
000476 0000                      .DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00	; U+002E
000477 0000
000478 0c00
000479 3000
00047a c000
00047b 0003
00047c 000c
00047d 0000
00047e 0000                      .DB	0x00, 0x00, 0x00, 0x0C, 0x00, 0x30, 0x00, 0xC0, 0x03, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00	; U+002F
00047f 0000
000480 e007
000481 5008
000482 9008
000483 1009
000484 100a
000485 e007
000486 0000                      .DB	0x00, 0x00, 0x07, 0xE0, 0x08, 0x50, 0x08, 0x90, 0x09, 0x10, 0x0A, 0x10, 0x07, 0xE0, 0x00, 0x00	; U+0030
000487 0000
000488 0000
000489 1002
00048a 1004
00048b f00f
00048c 1000
00048d 1000
00048e 0000                      .DB	0x00, 0x00, 0x00, 0x00, 0x02, 0x10, 0x04, 0x10, 0x0F, 0xF0, 0x00, 0x10, 0x00, 0x10, 0x00, 0x00	; U+0031
00048f 0000
000490 1004
000491 3008
000492 5008
000493 9008
000494 1009
000495 1006
000496 0000                      .DB	0x00, 0x00, 0x04, 0x10, 0x08, 0x30, 0x08, 0x50, 0x08, 0x90, 0x09, 0x10, 0x06, 0x10, 0x00, 0x00	; U+0032
000497 0000
000498 2008
000499 1008
00049a 1009
00049b 100b
00049c 100d
00049d e008
00049e 0000                      .DB	0x00, 0x00, 0x08, 0x20, 0x08, 0x10, 0x09, 0x10, 0x0B, 0x10, 0x0D, 0x10, 0x08, 0xE0, 0x00, 0x00	; U+0033
00049f 0000
0004a0 c000
0004a1 4001
0004a2 4002
0004a3 4004
0004a4 f00f
0004a5 4000
0004a6 0000                      .DB	0x00, 0x00, 0x00, 0xC0, 0x01, 0x40, 0x02, 0x40, 0x04, 0x40, 0x0F, 0xF0, 0x00, 0x40, 0x00, 0x00	; U+0034
0004a7 0000
0004a8 200f
0004a9 1009
0004aa 1009
0004ab 1009
0004ac 1009
0004ad e008
0004ae 0000                      .DB	0x00, 0x00, 0x0F, 0x20, 0x09, 0x10, 0x09, 0x10, 0x09, 0x10, 0x09, 0x10, 0x08, 0xE0, 0x00, 0x00	; U+0035
0004af 0000
0004b0 e003
0004b1 1005
0004b2 1009
0004b3 1009
0004b4 1001
0004b5 e000
0004b6 0000                      .DB	0x00, 0x00, 0x03, 0xE0, 0x05, 0x10, 0x09, 0x10, 0x09, 0x10, 0x01, 0x10, 0x00, 0xE0, 0x00, 0x00	; U+0036
0004b7 0000
0004b8 0008
0004b9 0008
0004ba 3008
0004bb c008
0004bc 000b
0004bd 000c
0004be 0000                      .DB	0x00, 0x00, 0x08, 0x00, 0x08, 0x00, 0x08, 0x30, 0x08, 0xC0, 0x0B, 0x00, 0x0C, 0x00, 0x00, 0x00	; U+0037
0004bf 0000
0004c0 e006
0004c1 1009
0004c2 1009
0004c3 1009
0004c4 1009
0004c5 e006
0004c6 0000                      .DB	0x00, 0x00, 0x06, 0xE0, 0x09, 0x10, 0x09, 0x10, 0x09, 0x10, 0x09, 0x10, 0x06, 0xE0, 0x00, 0x00	; U+0038
0004c7 0000
0004c8 0007
0004c9 8008
0004ca 9008
0004cb 9008
0004cc a008
0004cd c007
0004ce 0000                      .DB	0x00, 0x00, 0x07, 0x00, 0x08, 0x80, 0x08, 0x90, 0x08, 0x90, 0x08, 0xA0, 0x07, 0xC0, 0x00, 0x00	; U+0039
0004cf 0000
0004d0 0000
0004d1 0000
0004d2 3006
0004d3 3006
0004d4 0000
0004d5 0000
0004d6 0000                      .DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x30, 0x06, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00	; U+003A
0004d7 0000
0004d8 0000
0004d9 0000
0004da 3206
0004db 3c06
0004dc 0000
0004dd 0000
0004de 0000                      .DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x32, 0x06, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00	; U+003B
0004df 0000
0004e0 0000
0004e1 8000
0004e2 4001
0004e3 2002
0004e4 1004
0004e5 0000
0004e6 0000                      .DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x01, 0x40, 0x02, 0x20, 0x04, 0x10, 0x00, 0x00, 0x00, 0x00	; U+003C
0004e7 0000
0004e8 4002
0004e9 4002
0004ea 4002
0004eb 4002
0004ec 4002
0004ed 4002
0004ee 0000                      .DB	0x00, 0x00, 0x02, 0x40, 0x02, 0x40, 0x02, 0x40, 0x02, 0x40, 0x02, 0x40, 0x02, 0x40, 0x00, 0x00	; U+003D
0004ef 0000
0004f0 0000
0004f1 1004
0004f2 2002
0004f3 4001
0004f4 8000
0004f5 0000
0004f6 0000                      .DB	0x00, 0x00, 0x00, 0x00, 0x04, 0x10, 0x02, 0x20, 0x01, 0x40, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00	; U+003E
0004f7 0000
0004f8 0008
0004f9 0010
0004fa 3011
0004fb 0012
0004fc 0014
0004fd 0008
0004fe 0000                      .DB	0x00, 0x00, 0x08, 0x00, 0x10, 0x00, 0x11, 0x30, 0x12, 0x00, 0x14, 0x00, 0x08, 0x00, 0x00, 0x00	; U+003F
0004ff 0000
000500 f007
000501 0808
000502 c411
000503 2412
000504 2412
000505 440a
000506 e407                      .DB	0x00, 0x00, 0x07, 0xF0, 0x08, 0x08, 0x11, 0xC4, 0x12, 0x24, 0x12, 0x24, 0x0A, 0x44, 0x07, 0xE4	; U+0040
000507 0000
000508 f003
000509 8004
00050a 8008
00050b 8008
00050c 8004
00050d f003
00050e 0000                      .DB	0x00, 0x00, 0x03, 0xF0, 0x04, 0x80, 0x08, 0x80, 0x08, 0x80, 0x04, 0x80, 0x03, 0xF0, 0x00, 0x00	; U+0041
00050f 0000
000510 f00f
000511 1009
000512 1009
000513 1009
000514 1009
000515 e006
000516 0000                      .DB	0x00, 0x00, 0x0F, 0xF0, 0x09, 0x10, 0x09, 0x10, 0x09, 0x10, 0x09, 0x10, 0x06, 0xE0, 0x00, 0x00	; U+0042
000517 0000
000518 c003
000519 2004
00051a 1008
00051b 1008
00051c 1008
00051d 1008
00051e 0000                      .DB	0x00, 0x00, 0x03, 0xC0, 0x04, 0x20, 0x08, 0x10, 0x08, 0x10, 0x08, 0x10, 0x08, 0x10, 0x00, 0x00	; U+0043
00051f 0000
000520 f00f
000521 1008
000522 1008
000523 1008
000524 2004
000525 c003
000526 0000                      .DB	0x00, 0x00, 0x0F, 0xF0, 0x08, 0x10, 0x08, 0x10, 0x08, 0x10, 0x04, 0x20, 0x03, 0xC0, 0x00, 0x00	; U+0044
000527 0000
000528 f00f
000529 1009
00052a 1009
00052b 1009
00052c 1009
00052d 1008
00052e 0000                      .DB	0x00, 0x00, 0x0F, 0xF0, 0x09, 0x10, 0x09, 0x10, 0x09, 0x10, 0x09, 0x10, 0x08, 0x10, 0x00, 0x00	; U+0045
00052f 0000
000530 f00f
000531 0009
000532 0009
000533 0009
000534 0009
000535 0008
000536 0000                      .DB	0x00, 0x00, 0x0F, 0xF0, 0x09, 0x00, 0x09, 0x00, 0x09, 0x00, 0x09, 0x00, 0x08, 0x00, 0x00, 0x00	; U+0046
000537 0000
000538 c003
000539 2004
00053a 1008
00053b 1008
00053c 9008
00053d f008
00053e 0000                      .DB	0x00, 0x00, 0x03, 0xC0, 0x04, 0x20, 0x08, 0x10, 0x08, 0x10, 0x08, 0x90, 0x08, 0xF0, 0x00, 0x00	; U+0047
00053f 0000
000540 f00f
000541 0001
000542 0001
000543 0001
000544 0001
000545 f00f
000546 0000                      .DB	0x00, 0x00, 0x0F, 0xF0, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x0F, 0xF0, 0x00, 0x00	; U+0048
000547 0000
000548 0000
000549 1008
00054a 1008
00054b f00f
00054c 1008
00054d 1008
00054e 0000                      .DB	0x00, 0x00, 0x00, 0x00, 0x08, 0x10, 0x08, 0x10, 0x0F, 0xF0, 0x08, 0x10, 0x08, 0x10, 0x00, 0x00	; U+0049
00054f 0000
000550 6000
000551 1000
000552 1000
000553 1000
000554 1000
000555 e00f
000556 0000                      .DB	0x00, 0x00, 0x00, 0x60, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x0F, 0xE0, 0x00, 0x00	; U+004A
000557 0000
000558 f00f
000559 8001
00055a 8001
00055b 4002
00055c 2004
00055d 1008
00055e 0000                      .DB	0x00, 0x00, 0x0F, 0xF0, 0x01, 0x80, 0x01, 0x80, 0x02, 0x40, 0x04, 0x20, 0x08, 0x10, 0x00, 0x00	; U+004B
00055f 0000
000560 f00f
000561 1000
000562 1000
000563 1000
000564 1000
000565 1000
000566 0000                      .DB	0x00, 0x00, 0x0F, 0xF0, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x00	; U+004C
000567 0000
000568 f00f
000569 0004
00056a 0002
00056b 8001
00056c 0002
00056d 0004
00056e f00f                      .DB	0x00, 0x00, 0x0F, 0xF0, 0x04, 0x00, 0x02, 0x00, 0x01, 0x80, 0x02, 0x00, 0x04, 0x00, 0x0F, 0xF0	; U+004D
00056f 0000
000570 f00f
000571 0004
000572 0002
000573 0001
000574 8000
000575 f00f
000576 0000                      .DB	0x00, 0x00, 0x0F, 0xF0, 0x04, 0x00, 0x02, 0x00, 0x01, 0x00, 0x00, 0x80, 0x0F, 0xF0, 0x00, 0x00	; U+004E
000577 0000
000578 e007
000579 1008
00057a 1008
00057b 1008
00057c 1008
00057d e007
00057e 0000                      .DB	0x00, 0x00, 0x07, 0xE0, 0x08, 0x10, 0x08, 0x10, 0x08, 0x10, 0x08, 0x10, 0x07, 0xE0, 0x00, 0x00	; U+004F
00057f 0000
000580 f00f
000581 8008
000582 8008
000583 8008
000584 8008
000585 0007
000586 0000                      .DB	0x00, 0x00, 0x0F, 0xF0, 0x08, 0x80, 0x08, 0x80, 0x08, 0x80, 0x08, 0x80, 0x07, 0x00, 0x00, 0x00	; U+0050
000587 0000
000588 e007
000589 1008
00058a 1008
00058b 1008
00058c 1808
00058d e407
00058e 0000                      .DB	0x00, 0x00, 0x07, 0xE0, 0x08, 0x10, 0x08, 0x10, 0x08, 0x10, 0x08, 0x18, 0x07, 0xE4, 0x00, 0x00	; U+0051
00058f 0000
000590 f00f
000591 8008
000592 8008
000593 c008
000594 a008
000595 1007
000596 0000                      .DB	0x00, 0x00, 0x0F, 0xF0, 0x08, 0x80, 0x08, 0x80, 0x08, 0xC0, 0x08, 0xA0, 0x07, 0x10, 0x00, 0x00	; U+0052
000597 0000
000598 1006
000599 1009
00059a 1009
00059b 9008
00059c 9008
00059d 6008
00059e 0000                      .DB	0x00, 0x00, 0x06, 0x10, 0x09, 0x10, 0x09, 0x10, 0x08, 0x90, 0x08, 0x90, 0x08, 0x60, 0x00, 0x00	; U+0053
00059f 0000
0005a0 0008
0005a1 0008
0005a2 0008
0005a3 f00f
0005a4 0008
0005a5 0008
0005a6 0008                      .DB	0x00, 0x00, 0x08, 0x00, 0x08, 0x00, 0x08, 0x00, 0x0F, 0xF0, 0x08, 0x00, 0x08, 0x00, 0x08, 0x00	; U+0054
0005a7 0000
0005a8 e00f
0005a9 1000
0005aa 1000
0005ab 1000
0005ac 1000
0005ad e00f
0005ae 0000                      .DB	0x00, 0x00, 0x0F, 0xE0, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x0F, 0xE0, 0x00, 0x00	; U+0055
0005af 0000
0005b0 000f
0005b1 c000
0005b2 3000
0005b3 3000
0005b4 c000
0005b5 000f
0005b6 0000                      .DB	0x00, 0x00, 0x0F, 0x00, 0x00, 0xC0, 0x00, 0x30, 0x00, 0x30, 0x00, 0xC0, 0x0F, 0x00, 0x00, 0x00	; U+0056
0005b7 0000
0005b8 f00f
0005b9 1000
0005ba 2000
0005bb c000
0005bc 2000
0005bd 1000
0005be f00f                      .DB	0x00, 0x00, 0x0F, 0xF0, 0x00, 0x10, 0x00, 0x20, 0x00, 0xC0, 0x00, 0x20, 0x00, 0x10, 0x0F, 0xF0	; U+0057
0005bf 0000
0005c0 300c
0005c1 4002
0005c2 8001
0005c3 8001
0005c4 4002
0005c5 300c
0005c6 0000                      .DB	0x00, 0x00, 0x0C, 0x30, 0x02, 0x40, 0x01, 0x80, 0x01, 0x80, 0x02, 0x40, 0x0C, 0x30, 0x00, 0x00	; U+0058
0005c7 0000
0005c8 000c
0005c9 0002
0005ca 0001
0005cb f000
0005cc 0001
0005cd 0002
0005ce 000c                      .DB	0x00, 0x00, 0x0C, 0x00, 0x02, 0x00, 0x01, 0x00, 0x00, 0xF0, 0x01, 0x00, 0x02, 0x00, 0x0C, 0x00	; U+0059
0005cf 0000
0005d0 3008
0005d1 5008
0005d2 9008
0005d3 1009
0005d4 100a
0005d5 100c
0005d6 1008                      .DB	0x00, 0x00, 0x08, 0x30, 0x08, 0x50, 0x08, 0x90, 0x09, 0x10, 0x0A, 0x10, 0x0C, 0x10, 0x08, 0x10	; U+005A
0005d7 0000
0005d8 0000
0005d9 0000
0005da fc1f
0005db 0410
0005dc 0410
0005dd 0410
0005de 0000                      .DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0xFC, 0x10, 0x04, 0x10, 0x04, 0x10, 0x04, 0x00, 0x00	; U+005B
0005df 0000
0005e0 000c
0005e1 0003
0005e2 c000
0005e3 3000
0005e4 0c00
0005e5 0000
0005e6 0000                      .DB	0x00, 0x00, 0x0C, 0x00, 0x03, 0x00, 0x00, 0xC0, 0x00, 0x30, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x00	; U+005C
0005e7 0000
0005e8 0410
0005e9 0410
0005ea 0410
0005eb fc1f
0005ec 0000
0005ed 0000
0005ee 0000                      .DB	0x00, 0x00, 0x10, 0x04, 0x10, 0x04, 0x10, 0x04, 0x1F, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00	; U+005D
0005ef 0000
0005f0 0002
0005f1 0004
0005f2 0008
0005f3 0004
0005f4 0002
0005f5 0000
0005f6 0000                      .DB	0x00, 0x00, 0x02, 0x00, 0x04, 0x00, 0x08, 0x00, 0x04, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00	; U+005E
0005f7 0400
0005f8 0400
0005f9 0400
0005fa 0400
0005fb 0400
0005fc 0400
0005fd 0400
0005fe 0400                      .DB	0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04	; U+005F
0005ff 0000
000600 0000
000601 0000
000602 0010
000603 0008
000604 0004
000605 0000
000606 0000                      .DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x08, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00	; U+0060
000607 0000
000608 6000
000609 9002
00060a 9002
00060b 9002
00060c 9002
00060d f001
00060e 0000                      .DB	0x00, 0x00, 0x00, 0x60, 0x02, 0x90, 0x02, 0x90, 0x02, 0x90, 0x02, 0x90, 0x01, 0xF0, 0x00, 0x00	; U+0061
00060f 0000
000610 f01f
000611 1001
000612 1002
000613 1002
000614 1002
000615 e001
000616 0000                      .DB	0x00, 0x00, 0x1F, 0xF0, 0x01, 0x10, 0x02, 0x10, 0x02, 0x10, 0x02, 0x10, 0x01, 0xE0, 0x00, 0x00	; U+0062
000617 0000
000618 e001
000619 1002
00061a 1002
00061b 1002
00061c 1002
00061d 2001
00061e 0000                      .DB	0x00, 0x00, 0x01, 0xE0, 0x02, 0x10, 0x02, 0x10, 0x02, 0x10, 0x02, 0x10, 0x01, 0x20, 0x00, 0x00	; U+0063
00061f 0000
000620 e001
000621 1002
000622 1002
000623 1002
000624 2002
000625 f01f
000626 0000                      .DB	0x00, 0x00, 0x01, 0xE0, 0x02, 0x10, 0x02, 0x10, 0x02, 0x10, 0x02, 0x20, 0x1F, 0xF0, 0x00, 0x00	; U+0064
000627 0000
000628 e001
000629 9002
00062a 9002
00062b 9002
00062c 9002
00062d 9001
00062e 0000                      .DB	0x00, 0x00, 0x01, 0xE0, 0x02, 0x90, 0x02, 0x90, 0x02, 0x90, 0x02, 0x90, 0x01, 0x90, 0x00, 0x00	; U+0065
00062f 0000
000630 0002
000631 0002
000632 f00f
000633 0012
000634 0012
000635 0012
000636 0000                      .DB	0x00, 0x00, 0x02, 0x00, 0x02, 0x00, 0x0F, 0xF0, 0x12, 0x00, 0x12, 0x00, 0x12, 0x00, 0x00, 0x00	; U+0066
000637 0000
000638 e001
000639 1202
00063a 1202
00063b 1202
00063c 1202
00063d fc03
00063e 0000                      .DB	0x00, 0x00, 0x01, 0xE0, 0x02, 0x12, 0x02, 0x12, 0x02, 0x12, 0x02, 0x12, 0x03, 0xFC, 0x00, 0x00	; U+0067
00063f 0000
000640 f01f
000641 0001
000642 0002
000643 0002
000644 0002
000645 f001
000646 0000                      .DB	0x00, 0x00, 0x1F, 0xF0, 0x01, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x01, 0xF0, 0x00, 0x00	; U+0068
000647 0000
000648 0000
000649 1002
00064a 1002
00064b f01b
00064c 1000
00064d 1000
00064e 0000                      .DB	0x00, 0x00, 0x00, 0x00, 0x02, 0x10, 0x02, 0x10, 0x1B, 0xF0, 0x00, 0x10, 0x00, 0x10, 0x00, 0x00	; U+0069
00064f 0000
000650 0000
000651 0200
000652 0202
000653 0202
000654 fc1b
000655 0000
000656 0000                      .DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x02, 0x02, 0x02, 0x02, 0x1B, 0xFC, 0x00, 0x00, 0x00, 0x00	; U+006A
000657 0000
000658 f01f
000659 4000
00065a 8000
00065b 4001
00065c 2002
00065d 1000
00065e 0000                      .DB	0x00, 0x00, 0x1F, 0xF0, 0x00, 0x40, 0x00, 0x80, 0x01, 0x40, 0x02, 0x20, 0x00, 0x10, 0x00, 0x00	; U+006B
00065f 0000
000660 0010
000661 0010
000662 e01f
000663 1000
000664 1000
000665 1000
000666 0000                      .DB	0x00, 0x00, 0x10, 0x00, 0x10, 0x00, 0x1F, 0xE0, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x00	; U+006c
000667 0000
000668 f003
000669 0002
00066a 0002
00066b f001
00066c 0002
00066d 0002
00066e f001                      .DB	0x00, 0x00, 0x03, 0xF0, 0x02, 0x00, 0x02, 0x00, 0x01, 0xF0, 0x02, 0x00, 0x02, 0x00, 0x01, 0xF0	; U+006d
00066f 0000
000670 f003
000671 0001
000672 0002
000673 0002
000674 0002
000675 f001
000676 0000                      .DB	0x00, 0x00, 0x03, 0xF0, 0x01, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x01, 0xF0, 0x00, 0x00	; U+006e
000677 0000
000678 e001
000679 1002
00067a 1002
00067b 1002
00067c 1002
00067d e001
00067e 0000                      .DB	0x00, 0x00, 0x01, 0xE0, 0x02, 0x10, 0x02, 0x10, 0x02, 0x10, 0x02, 0x10, 0x01, 0xE0, 0x00, 0x00	; U+006F
00067f 0000
000680 fe03
000681 1001
000682 1002
000683 1002
000684 1002
000685 e001
000686 0000                      .DB	0x00, 0x00, 0x03, 0xFE, 0x01, 0x10, 0x02, 0x10, 0x02, 0x10, 0x02, 0x10, 0x01, 0xE0, 0x00, 0x00	; U+0070
000687 0000
000688 e001
000689 1002
00068a 1002
00068b 1002
00068c 2002
00068d fe03
00068e 0000                      .DB	0x00, 0x00, 0x01, 0xE0, 0x02, 0x10, 0x02, 0x10, 0x02, 0x10, 0x02, 0x20, 0x03, 0xFE, 0x00, 0x00	; U+0071
00068f 0000
000690 f003
000691 0001
000692 0002
000693 0002
000694 0002
000695 0001
000696 0000                      .DB	0x00, 0x00, 0x03, 0xF0, 0x01, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x01, 0x00, 0x00, 0x00	; U+0072
000697 0000
000698 1001
000699 9002
00069a 9002
00069b 5002
00069c 5002
00069d 2002
00069e 0000                      .DB	0x00, 0x00, 0x01, 0x10, 0x02, 0x90, 0x02, 0x90, 0x02, 0x50, 0x02, 0x50, 0x02, 0x20, 0x00, 0x00	; U+0073
00069f 0000
0006a0 0002
0006a1 0002
0006a2 e00f
0006a3 1002
0006a4 1002
0006a5 1002
0006a6 0000                      .DB	0x00, 0x00, 0x02, 0x00, 0x02, 0x00, 0x0F, 0xE0, 0x02, 0x10, 0x02, 0x10, 0x02, 0x10, 0x00, 0x00	; U+0074
0006a7 0000
0006a8 e003
0006a9 1000
0006aa 1000
0006ab 1000
0006ac 2000
0006ad f003
0006ae 0000                      .DB	0x00, 0x00, 0x03, 0xE0, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x20, 0x03, 0xF0, 0x00, 0x00	; U+0075
0006af 0000
0006b0 0003
0006b1 c000
0006b2 3000
0006b3 3000
0006b4 c000
0006b5 0003
0006b6 0000                      .DB	0x00, 0x00, 0x03, 0x00, 0x00, 0xC0, 0x00, 0x30, 0x00, 0x30, 0x00, 0xC0, 0x03, 0x00, 0x00, 0x00	; U+0076
0006b7 0000
0006b8 e003
0006b9 1000
0006ba 1000
0006bb e001
0006bc 1000
0006bd 1000
0006be e003                      .DB	0x00, 0x00, 0x03, 0xE0, 0x00, 0x10, 0x00, 0x10, 0x01, 0xE0, 0x00, 0x10, 0x00, 0x10, 0x03, 0xE0	; U+0077
0006bf 0000
0006c0 1002
0006c1 2001
0006c2 c000
0006c3 c000
0006c4 2001
0006c5 1002
0006c6 0000                      .DB	0x00, 0x00, 0x02, 0x10, 0x01, 0x20, 0x00, 0xC0, 0x00, 0xC0, 0x01, 0x20, 0x02, 0x10, 0x00, 0x00	; U+0078
0006c7 0000
0006c8 e003
0006c9 1200
0006ca 1200
0006cb 1200
0006cc 2200
0006cd fc03
0006ce 0000                      .DB	0x00, 0x00, 0x03, 0xE0, 0x00, 0x12, 0x00, 0x12, 0x00, 0x12, 0x00, 0x22, 0x03, 0xFC, 0x00, 0x00	; U+0079
0006cf 0000
0006d0 1002
0006d1 3002
0006d2 5002
0006d3 9002
0006d4 1003
0006d5 1002
0006d6 0000                      .DB	0x00, 0x00, 0x02, 0x10, 0x02, 0x30, 0x02, 0x50, 0x02, 0x90, 0x03, 0x10, 0x02, 0x10, 0x00, 0x00	; U+007A
0006d7 0000
0006d8 0000
0006d9 8000
0006da 8000
0006db 780f
0006dc 0410
0006dd 0410
0006de 0000                      .DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x80, 0x0F, 0x78, 0x10, 0x04, 0x10, 0x04, 0x00, 0x00	; U+007B
0006df 0000
0006e0 0000
0006e1 0000
0006e2 0000
0006e3 fc3f
0006e4 0000
0006e5 0000
0006e6 0000                      .DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00	; U+007C
0006e7 0000
0006e8 0410
0006e9 0410
0006ea 780f
0006eb 8000
0006ec 8000
0006ed 0000
0006ee 0000                      .DB	0x00, 0x00, 0x10, 0x04, 0x10, 0x04, 0x0F, 0x78, 0x00, 0x80, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00	; U+007D
0006ef 0000
0006f0 0006
0006f1 0008
0006f2 0008
0006f3 0004
0006f4 0002
0006f5 0002
0006f6 000c                      .DB	0x00, 0x00, 0x06, 0x00, 0x08, 0x00, 0x08, 0x00, 0x04, 0x00, 0x02, 0x00, 0x02, 0x00, 0x0C, 0x00	; U+007E
0006f7 5455
0006f8 aaaa
0006f9 5455
0006fa aaaa
0006fb 5455
0006fc aaaa
0006fd 5455
0006fe aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
0006ff 5455
000700 aaaa
000701 5455
000702 aaaa
000703 5455
000704 aaaa
000705 5455
000706 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
000707 5455
000708 aaaa
000709 5455
00070a aaaa
00070b 5455
00070c aaaa
00070d 5455
00070e aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
00070f 5455
000710 aaaa
000711 5455
000712 aaaa
000713 5455
000714 aaaa
000715 5455
000716 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
000717 5455
000718 aaaa
000719 5455
00071a aaaa
00071b 5455
00071c aaaa
00071d 5455
00071e aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
00071f 5455
000720 aaaa
000721 5455
000722 aaaa
000723 5455
000724 aaaa
000725 5455
000726 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
000727 5455
000728 aaaa
000729 5455
00072a aaaa
00072b 5455
00072c aaaa
00072d 5455
00072e aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
00072f 5455
000730 aaaa
000731 5455
000732 aaaa
000733 5455
000734 aaaa
000735 5455
000736 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
000737 5455
000738 aaaa
000739 5455
00073a aaaa
00073b 5455
00073c aaaa
00073d 5455
00073e aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
00073f 5455
000740 aaaa
000741 5455
000742 aaaa
000743 5455
000744 aaaa
000745 5455
000746 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
000747 5455
000748 aaaa
000749 5455
00074a aaaa
00074b 5455
00074c aaaa
00074d 5455
00074e aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
00074f 5455
000750 aaaa
000751 5455
000752 aaaa
000753 5455
000754 aaaa
000755 5455
000756 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
000757 5455
000758 aaaa
000759 5455
00075a aaaa
00075b 5455
00075c aaaa
00075d 5455
00075e aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
00075f 5455
000760 aaaa
000761 5455
000762 aaaa
000763 5455
000764 aaaa
000765 5455
000766 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
000767 5455
000768 aaaa
000769 5455
00076a aaaa
00076b 5455
00076c aaaa
00076d 5455
00076e aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
00076f 5455
000770 aaaa
000771 5455
000772 aaaa
000773 5455
000774 aaaa
000775 5455
000776 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
000777 5455
000778 aaaa
000779 5455
00077a aaaa
00077b 5455
00077c aaaa
00077d 5455
00077e aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
00077f 5455
000780 aaaa
000781 5455
000782 aaaa
000783 5455
000784 aaaa
000785 5455
000786 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
000787 5455
000788 aaaa
000789 5455
00078a aaaa
00078b 5455
00078c aaaa
00078d 5455
00078e aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
00078f 5455
000790 aaaa
000791 5455
000792 aaaa
000793 5455
000794 aaaa
000795 5455
000796 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
000797 5455
000798 aaaa
000799 5455
00079a aaaa
00079b 5455
00079c aaaa
00079d 5455
00079e aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
00079f 5455
0007a0 aaaa
0007a1 5455
0007a2 aaaa
0007a3 5455
0007a4 aaaa
0007a5 5455
0007a6 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
0007a7 5455
0007a8 aaaa
0007a9 5455
0007aa aaaa
0007ab 5455
0007ac aaaa
0007ad 5455
0007ae aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
0007af 5455
0007b0 aaaa
0007b1 5455
0007b2 aaaa
0007b3 5455
0007b4 aaaa
0007b5 5455
0007b6 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
0007b7 5455
0007b8 aaaa
0007b9 5455
0007ba aaaa
0007bb 5455
0007bc aaaa
0007bd 5455
0007be aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
0007bf 5455
0007c0 aaaa
0007c1 5455
0007c2 aaaa
0007c3 5455
0007c4 aaaa
0007c5 5455
0007c6 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
0007c7 5455
0007c8 aaaa
0007c9 5455
0007ca aaaa
0007cb 5455
0007cc aaaa
0007cd 5455
0007ce aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
0007cf 5455
0007d0 aaaa
0007d1 5455
0007d2 aaaa
0007d3 5455
0007d4 aaaa
0007d5 5455
0007d6 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
0007d7 5455
0007d8 aaaa
0007d9 5455
0007da aaaa
0007db 5455
0007dc aaaa
0007dd 5455
0007de aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
0007df 5455
0007e0 aaaa
0007e1 5455
0007e2 aaaa
0007e3 5455
0007e4 aaaa
0007e5 5455
0007e6 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
0007e7 5455
0007e8 aaaa
0007e9 5455
0007ea aaaa
0007eb 5455
0007ec aaaa
0007ed 5455
0007ee aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
0007ef 5455
0007f0 aaaa
0007f1 5455
0007f2 aaaa
0007f3 5455
0007f4 aaaa
0007f5 5455
0007f6 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
0007f7 5455
0007f8 aaaa
0007f9 5455
0007fa aaaa
0007fb 5455
0007fc aaaa
0007fd 5455
0007fe aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
0007ff 0000
000800 0000
000801 0000
000802 0000
000803 0000
000804 0000
000805 0000
000806 0000                      .DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00	; U+00A0
000807 0000
000808 0000
000809 0000
00080a 3e03
00080b 0000
00080c 0000
00080d 0000
00080e 0000                      .DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x3E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00	; U+00A1
00080f 0000
000810 c003
000811 2004
000812 2004
000813 f81f
000814 2004
000815 2004
000816 4002                      .DB	0x00, 0x00, 0x03, 0xC0, 0x04, 0x20, 0x04, 0x20, 0x1F, 0xF8, 0x04, 0x20, 0x04, 0x20, 0x02, 0x40	; U+00A2
000817 0000
000818 1001
000819 2001
00081a e007
00081b 2009
00081c 1009
00081d 1008
00081e 2004                      .DB	0x00, 0x00, 0x01, 0x10, 0x01, 0x20, 0x07, 0xE0, 0x09, 0x20, 0x09, 0x10, 0x08, 0x10, 0x04, 0x20	; U+00A3
00081f 0000
000820 2004
000821 c003
000822 4002
000823 4002
000824 c003
000825 2004
000826 0000                      .DB	0x00, 0x00, 0x04, 0x20, 0x03, 0xC0, 0x02, 0x40, 0x02, 0x40, 0x03, 0xC0, 0x04, 0x20, 0x00, 0x00	; U+00A4
000827 0000
000828 0008
000829 4005
00082a 4003
00082b f001
00082c 4003
00082d 4005
00082e 0008                      .DB	0x00, 0x00, 0x08, 0x00, 0x05, 0x40, 0x03, 0x40, 0x01, 0xF0, 0x03, 0x40, 0x05, 0x40, 0x08, 0x00	; U+00A5
00082f 0000
000830 0000
000831 0000
000832 0000
000833 3c0f
000834 0000
000835 0000
000836 0000                      .DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00	; U+00A6
000837 5455
000838 aaaa
000839 5455
00083a aaaa
00083b 5455
00083c aaaa
00083d 5455
00083e aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
00083f 0000
000840 0000
000841 0060
000842 0000
000843 0000
000844 0060
000845 0000
000846 0000                      .DB	0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00	; U+00A8
000847 0000
000848 c003
000849 2004
00084a 9009
00084b 500a
00084c 500a
00084d 2004
00084e c003                      .DB	0x00, 0x00, 0x03, 0xC0, 0x04, 0x20, 0x09, 0x90, 0x0A, 0x50, 0x0A, 0x50, 0x04, 0x20, 0x03, 0xC0	; U+00A9
00084f 5455
000850 aaaa
000851 5455
000852 aaaa
000853 5455
000854 aaaa
000855 5455
000856 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
000857 0000
000858 8000
000859 4001
00085a 2002
00085b 9004
00085c 4001
00085d 2002
00085e 1004                      .DB	0x00, 0x00, 0x00, 0x80, 0x01, 0x40, 0x02, 0x20, 0x04, 0x90, 0x01, 0x40, 0x02, 0x20, 0x04, 0x10	; U+00AB
00085f 5455
000860 aaaa
000861 5455
000862 aaaa
000863 5455
000864 aaaa
000865 5455
000866 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
000867 0000
000868 8000
000869 8000
00086a 8000
00086b 8000
00086c 8000
00086d 8000
00086e 0000                      .DB	0x00, 0x00, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x00	; U+00AD
00086f 5455
000870 aaaa
000871 5455
000872 aaaa
000873 5455
000874 aaaa
000875 5455
000876 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
000877 5455
000878 aaaa
000879 5455
00087a aaaa
00087b 5455
00087c aaaa
00087d 5455
00087e aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
00087f 0000
000880 0007
000881 8008
000882 8008
000883 8008
000884 0007
000885 0000
000886 0000                      .DB	0x00, 0x00, 0x07, 0x00, 0x08, 0x80, 0x08, 0x80, 0x08, 0x80, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00	; U+00B0
000887 5455
000888 aaaa
000889 5455
00088a aaaa
00088b 5455
00088c aaaa
00088d 5455
00088e aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
00088f 5455
000890 aaaa
000891 5455
000892 aaaa
000893 5455
000894 aaaa
000895 5455
000896 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
000897 5455
000898 aaaa
000899 5455
00089a aaaa
00089b 5455
00089c aaaa
00089d 5455
00089e aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
00089f 5455
0008a0 aaaa
0008a1 5455
0008a2 aaaa
0008a3 5455
0008a4 aaaa
0008a5 5455
0008a6 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
0008a7 5455
0008a8 aaaa
0008a9 5455
0008aa aaaa
0008ab 5455
0008ac aaaa
0008ad 5455
0008ae aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
0008af 5455
0008b0 aaaa
0008b1 5455
0008b2 aaaa
0008b3 5455
0008b4 aaaa
0008b5 5455
0008b6 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
0008b7 5455
0008b8 aaaa
0008b9 5455
0008ba aaaa
0008bb 5455
0008bc aaaa
0008bd 5455
0008be aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
0008bf 0000
0008c0 0000
0008c1 0200
0008c2 0200
0008c3 0c00
0008c4 0000
0008c5 0000
0008c6 0000                      .DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x02, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00	; U+00B8
0008c7 5455
0008c8 aaaa
0008c9 5455
0008ca aaaa
0008cb 5455
0008cc aaaa
0008cd 5455
0008ce aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
0008cf 5455
0008d0 aaaa
0008d1 5455
0008d2 aaaa
0008d3 5455
0008d4 aaaa
0008d5 5455
0008d6 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
0008d7 0000
0008d8 1004
0008d9 2002
0008da 4001
0008db 9004
0008dc 2002
0008dd 4001
0008de 8000                      .DB	0x00, 0x00, 0x04, 0x10, 0x02, 0x20, 0x01, 0x40, 0x04, 0x90, 0x02, 0x20, 0x01, 0x40, 0x00, 0x80	; U+00BB
0008df 5455
0008e0 aaaa
0008e1 5455
0008e2 aaaa
0008e3 5455
0008e4 aaaa
0008e5 5455
0008e6 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
0008e7 5455
0008e8 aaaa
0008e9 5455
0008ea aaaa
0008eb 5455
0008ec aaaa
0008ed 5455
0008ee aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
0008ef 5455
0008f0 aaaa
0008f1 5455
0008f2 aaaa
0008f3 5455
0008f4 aaaa
0008f5 5455
0008f6 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
0008f7 0000
0008f8 0000
0008f9 0c00
0008fa 1200
0008fb 2203
0008fc 0200
0008fd 0400
0008fe 0000                      .DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x12, 0x03, 0x22, 0x00, 0x02, 0x00, 0x04, 0x00, 0x00	; U+00BF
0008ff 0000
000900 7000
000901 c043
000902 402c
000903 400c
000904 c003
000905 7000
000906 0000                      .DB	0x00, 0x00, 0x00, 0x70, 0x43, 0xC0, 0x2C, 0x40, 0x0C, 0x40, 0x03, 0xC0, 0x00, 0x70, 0x00, 0x00	; U+00C0
000907 0000
000908 7000
000909 c003
00090a 400c
00090b 402c
00090c c043
00090d 7000
00090e 0000                      .DB	0x00, 0x00, 0x00, 0x70, 0x03, 0xC0, 0x0C, 0x40, 0x2C, 0x40, 0x43, 0xC0, 0x00, 0x70, 0x00, 0x00	; U+00C1
00090f 0000
000910 7000
000911 c023
000912 404c
000913 404c
000914 c023
000915 7000
000916 0000                      .DB	0x00, 0x00, 0x00, 0x70, 0x23, 0xC0, 0x4C, 0x40, 0x4C, 0x40, 0x23, 0xC0, 0x00, 0x70, 0x00, 0x00	; U+00C2
000917 0000
000918 7020
000919 c043
00091a 404c
00091b 402c
00091c c023
00091d 7040
00091e 0000                      .DB	0x00, 0x00, 0x20, 0x70, 0x43, 0xC0, 0x4C, 0x40, 0x2C, 0x40, 0x23, 0xC0, 0x40, 0x70, 0x00, 0x00	; U+00C3
00091f 0000
000920 7000
000921 c063
000922 400c
000923 400c
000924 c063
000925 7000
000926 0000                      .DB	0x00, 0x00, 0x00, 0x70, 0x63, 0xC0, 0x0C, 0x40, 0x0C, 0x40, 0x63, 0xC0, 0x00, 0x70, 0x00, 0x00	; U+00C4
000927 0000
000928 7000
000929 c033
00092a 404c
00092b 404c
00092c c033
00092d 7000
00092e 0000                      .DB	0x00, 0x00, 0x00, 0x70, 0x33, 0xC0, 0x4C, 0x40, 0x4C, 0x40, 0x33, 0xC0, 0x00, 0x70, 0x00, 0x00	; U+00C5
00092f 0000
000930 7000
000931 c003
000932 400c
000933 f00f
000934 1009
000935 1009
000936 1008                      .DB	0x00, 0x00, 0x00, 0x70, 0x03, 0xC0, 0x0C, 0x40, 0x0F, 0xF0, 0x09, 0x10, 0x09, 0x10, 0x08, 0x10	; U+00C6
000937 0000
000938 c003
000939 2204
00093a 1208
00093b 1c08
00093c 1008
00093d 1008
00093e 0000                      .DB	0x00, 0x00, 0x03, 0xC0, 0x04, 0x22, 0x08, 0x12, 0x08, 0x1C, 0x08, 0x10, 0x08, 0x10, 0x00, 0x00	; U+00C7
00093f 0000
000940 f00f
000941 1049
000942 1029
000943 1009
000944 1009
000945 1008
000946 0000                      .DB	0x00, 0x00, 0x0F, 0xF0, 0x49, 0x10, 0x29, 0x10, 0x09, 0x10, 0x09, 0x10, 0x08, 0x10, 0x00, 0x00	; U+00C8
000947 0000
000948 f00f
000949 1009
00094a 1009
00094b 1029
00094c 1049
00094d 1008
00094e 0000                      .DB	0x00, 0x00, 0x0F, 0xF0, 0x09, 0x10, 0x09, 0x10, 0x29, 0x10, 0x49, 0x10, 0x08, 0x10, 0x00, 0x00	; U+00C9
00094f 0000
000950 f00f
000951 1029
000952 1049
000953 1049
000954 1029
000955 1008
000956 0000                      .DB	0x00, 0x00, 0x0F, 0xF0, 0x29, 0x10, 0x49, 0x10, 0x49, 0x10, 0x29, 0x10, 0x08, 0x10, 0x00, 0x00	; U+00CA
000957 0000
000958 f00f
000959 1069
00095a 1009
00095b 1009
00095c 1069
00095d 1008
00095e 0000                      .DB	0x00, 0x00, 0x0F, 0xF0, 0x69, 0x10, 0x09, 0x10, 0x09, 0x10, 0x69, 0x10, 0x08, 0x10, 0x00, 0x00	; U+00CB
00095f 0000
000960 0000
000961 1008
000962 1048
000963 f02f
000964 1008
000965 1008
000966 0000                      .DB	0x00, 0x00, 0x00, 0x00, 0x08, 0x10, 0x48, 0x10, 0x2F, 0xF0, 0x08, 0x10, 0x08, 0x10, 0x00, 0x00	; U+00CC
000967 0000
000968 0000
000969 1008
00096a 1008
00096b f02f
00096c 1048
00096d 1008
00096e 0000                      .DB	0x00, 0x00, 0x00, 0x00, 0x08, 0x10, 0x08, 0x10, 0x2F, 0xF0, 0x48, 0x10, 0x08, 0x10, 0x00, 0x00	; U+00CD
00096f 0000
000970 0000
000971 1008
000972 1028
000973 f04f
000974 1028
000975 1008
000976 0000                      .DB	0x00, 0x00, 0x00, 0x00, 0x08, 0x10, 0x28, 0x10, 0x4F, 0xF0, 0x28, 0x10, 0x08, 0x10, 0x00, 0x00	; U+00CE
000977 0000
000978 0000
000979 1008
00097a 1068
00097b f00f
00097c 1068
00097d 1008
00097e 0000                      .DB	0x00, 0x00, 0x00, 0x00, 0x08, 0x10, 0x68, 0x10, 0x0F, 0xF0, 0x68, 0x10, 0x08, 0x10, 0x00, 0x00	; U+00CF
00097f 0000
000980 0001
000981 f00f
000982 1009
000983 1009
000984 1008
000985 2004
000986 c003                      .DB	0x00, 0x00, 0x01, 0x00, 0x0F, 0xF0, 0x09, 0x10, 0x09, 0x10, 0x08, 0x10, 0x04, 0x20, 0x03, 0xC0	; U+00D0
000987 0000
000988 f02f
000989 0044
00098a 0042
00098b 0021
00098c 8020
00098d f04f
00098e 0000                      .DB	0x00, 0x00, 0x2F, 0xF0, 0x44, 0x00, 0x42, 0x00, 0x21, 0x00, 0x20, 0x80, 0x4F, 0xF0, 0x00, 0x00	; U+00D1
00098f 0000
000990 c003
000991 2004
000992 1048
000993 1028
000994 1008
000995 2004
000996 c003                      .DB	0x00, 0x00, 0x03, 0xC0, 0x04, 0x20, 0x48, 0x10, 0x28, 0x10, 0x08, 0x10, 0x04, 0x20, 0x03, 0xC0	; U+00D2
000997 0000
000998 c003
000999 2004
00099a 1008
00099b 1028
00099c 1048
00099d 2004
00099e c003                      .DB	0x00, 0x00, 0x03, 0xC0, 0x04, 0x20, 0x08, 0x10, 0x28, 0x10, 0x48, 0x10, 0x04, 0x20, 0x03, 0xC0	; U+00D3
00099f 0000
0009a0 c003
0009a1 2004
0009a2 1028
0009a3 1048
0009a4 1028
0009a5 2004
0009a6 c003                      .DB	0x00, 0x00, 0x03, 0xC0, 0x04, 0x20, 0x28, 0x10, 0x48, 0x10, 0x28, 0x10, 0x04, 0x20, 0x03, 0xC0	; U+00D4
0009a7 0000
0009a8 c003
0009a9 2024
0009aa 1048
0009ab 1048
0009ac 1028
0009ad 2024
0009ae c043                      .DB	0x00, 0x00, 0x03, 0xC0, 0x24, 0x20, 0x48, 0x10, 0x48, 0x10, 0x28, 0x10, 0x24, 0x20, 0x43, 0xC0	; U+00D5
0009af 0000
0009b0 c003
0009b1 2064
0009b2 1008
0009b3 1008
0009b4 1008
0009b5 2064
0009b6 c003                      .DB	0x00, 0x00, 0x03, 0xC0, 0x64, 0x20, 0x08, 0x10, 0x08, 0x10, 0x08, 0x10, 0x64, 0x20, 0x03, 0xC0	; U+00D6
0009b7 0000
0009b8 0000
0009b9 2002
0009ba 4001
0009bb 8000
0009bc 4001
0009bd 2002
0009be 0000                      .DB	0x00, 0x00, 0x00, 0x00, 0x02, 0x20, 0x01, 0x40, 0x00, 0x80, 0x01, 0x40, 0x02, 0x20, 0x00, 0x00	; U+00D7
0009bf 0000
0009c0 c803
0009c1 3004
0009c2 5008
0009c3 9009
0009c4 100a
0009c5 200c
0009c6 c013                      .DB	0x00, 0x00, 0x03, 0xC8, 0x04, 0x30, 0x08, 0x50, 0x09, 0x90, 0x0A, 0x10, 0x0C, 0x20, 0x13, 0xC0	; U+00D8
0009c7 0000
0009c8 e00f
0009c9 1040
0009ca 1020
0009cb 1000
0009cc 1000
0009cd e00f
0009ce 0000                      .DB	0x00, 0x00, 0x0F, 0xE0, 0x40, 0x10, 0x20, 0x10, 0x00, 0x10, 0x00, 0x10, 0x0F, 0xE0, 0x00, 0x00	; U+00D9
0009cf 0000
0009d0 e00f
0009d1 1000
0009d2 1000
0009d3 1020
0009d4 1040
0009d5 e00f
0009d6 0000                      .DB	0x00, 0x00, 0x0F, 0xE0, 0x00, 0x10, 0x00, 0x10, 0x20, 0x10, 0x40, 0x10, 0x0F, 0xE0, 0x00, 0x00	; U+00DA
0009d7 0000
0009d8 e00f
0009d9 1020
0009da 1040
0009db 1040
0009dc 1020
0009dd e00f
0009de 0000                      .DB	0x00, 0x00, 0x0F, 0xE0, 0x20, 0x10, 0x40, 0x10, 0x40, 0x10, 0x20, 0x10, 0x0F, 0xE0, 0x00, 0x00	; U+00DB
0009df 0000
0009e0 e00f
0009e1 1060
0009e2 1000
0009e3 1000
0009e4 1060
0009e5 e00f
0009e6 0000                      .DB	0x00, 0x00, 0x0F, 0xE0, 0x60, 0x10, 0x00, 0x10, 0x00, 0x10, 0x60, 0x10, 0x0F, 0xE0, 0x00, 0x00	; U+00DC
0009e7 0000
0009e8 000c
0009e9 0062
0009ea 0001
0009eb f000
0009ec 0001
0009ed 0062
0009ee 000c                      .DB	0x00, 0x00, 0x0C, 0x00, 0x62, 0x00, 0x01, 0x00, 0x00, 0xF0, 0x01, 0x00, 0x62, 0x00, 0x0C, 0x00	; U+00DD
0009ef 0000
0009f0 f00f
0009f1 2004
0009f2 2004
0009f3 2004
0009f4 2004
0009f5 c003
0009f6 0000                      .DB	0x00, 0x00, 0x0F, 0xF0, 0x04, 0x20, 0x04, 0x20, 0x04, 0x20, 0x04, 0x20, 0x03, 0xC0, 0x00, 0x00	; U+00DE
0009f7 0000
0009f8 f007
0009f9 0008
0009fa 0008
0009fb 1009
0009fc 100b
0009fd e004
0009fe 0000                      .DB	0x00, 0x00, 0x07, 0xF0, 0x08, 0x00, 0x08, 0x00, 0x09, 0x10, 0x0B, 0x10, 0x04, 0xE0, 0x00, 0x00	; U+00DF
0009ff 0000
000a00 6000
000a01 9012
000a02 900a
000a03 9002
000a04 9002
000a05 f001
000a06 0000                      .DB	0x00, 0x00, 0x00, 0x60, 0x12, 0x90, 0x0A, 0x90, 0x02, 0x90, 0x02, 0x90, 0x01, 0xF0, 0x00, 0x00	; U+00E0
000a07 0000
000a08 6000
000a09 9002
000a0a 9002
000a0b 900a
000a0c 9012
000a0d f001
000a0e 0000                      .DB	0x00, 0x00, 0x00, 0x60, 0x02, 0x90, 0x02, 0x90, 0x0A, 0x90, 0x12, 0x90, 0x01, 0xF0, 0x00, 0x00	; U+00E1
000a0f 0000
000a10 6000
000a11 900a
000a12 9012
000a13 9012
000a14 900a
000a15 f001
000a16 0000                      .DB	0x00, 0x00, 0x00, 0x60, 0x0A, 0x90, 0x12, 0x90, 0x12, 0x90, 0x0A, 0x90, 0x01, 0xF0, 0x00, 0x00	; U+00E2
000a17 0000
000a18 6008
000a19 9012
000a1a 9012
000a1b 900a
000a1c 900a
000a1d f011
000a1e 0000                      .DB	0x00, 0x00, 0x08, 0x60, 0x12, 0x90, 0x12, 0x90, 0x0A, 0x90, 0x0A, 0x90, 0x11, 0xF0, 0x00, 0x00	; U+00E3
000a1f 0000
000a20 6000
000a21 901a
000a22 9002
000a23 9002
000a24 901a
000a25 f001
000a26 0000                      .DB	0x00, 0x00, 0x00, 0x60, 0x1A, 0x90, 0x02, 0x90, 0x02, 0x90, 0x1A, 0x90, 0x01, 0xF0, 0x00, 0x00	; U+00E4
000a27 0000
000a28 6000
000a29 9032
000a2a 904a
000a2b 904a
000a2c 9032
000a2d f001
000a2e 0000                      .DB	0x00, 0x00, 0x00, 0x60, 0x32, 0x90, 0x4A, 0x90, 0x4A, 0x90, 0x32, 0x90, 0x01, 0xF0, 0x00, 0x00	; U+00E5
000a2f 0000
000a30 6000
000a31 9002
000a32 9002
000a33 e001
000a34 9002
000a35 9002
000a36 9001                      .DB	0x00, 0x00, 0x00, 0x60, 0x02, 0x90, 0x02, 0x90, 0x01, 0xE0, 0x02, 0x90, 0x02, 0x90, 0x01, 0x90	; U+00E6
000a37 0000
000a38 e001
000a39 1202
000a3a 1202
000a3b 1c02
000a3c 1002
000a3d 2001
000a3e 0000                      .DB	0x00, 0x00, 0x01, 0xE0, 0x02, 0x12, 0x02, 0x12, 0x02, 0x1C, 0x02, 0x10, 0x01, 0x20, 0x00, 0x00	; U+00E7
000a3f 0000
000a40 e001
000a41 9012
000a42 900a
000a43 9002
000a44 9002
000a45 9001
000a46 0000                      .DB	0x00, 0x00, 0x01, 0xE0, 0x12, 0x90, 0x0A, 0x90, 0x02, 0x90, 0x02, 0x90, 0x01, 0x90, 0x00, 0x00	; U+00E8
000a47 0000
000a48 e001
000a49 9002
000a4a 9002
000a4b 900a
000a4c 9012
000a4d 9001
000a4e 0000                      .DB	0x00, 0x00, 0x01, 0xE0, 0x02, 0x90, 0x02, 0x90, 0x0A, 0x90, 0x12, 0x90, 0x01, 0x90, 0x00, 0x00	; U+00E9
000a4f 0000
000a50 e001
000a51 900a
000a52 9012
000a53 9012
000a54 900a
000a55 9001
000a56 0000                      .DB	0x00, 0x00, 0x01, 0xE0, 0x0A, 0x90, 0x12, 0x90, 0x12, 0x90, 0x0A, 0x90, 0x01, 0x90, 0x00, 0x00	; U+00EA
000a57 0000
000a58 e001
000a59 901a
000a5a 9002
000a5b 9002
000a5c 901a
000a5d 9001
000a5e 0000                      .DB	0x00, 0x00, 0x01, 0xE0, 0x1A, 0x90, 0x02, 0x90, 0x02, 0x90, 0x1A, 0x90, 0x01, 0x90, 0x00, 0x00	; U+00EB
000a5f 0000
000a60 0000
000a61 1012
000a62 100a
000a63 f003
000a64 1000
000a65 1000
000a66 0000                      .DB	0x00, 0x00, 0x00, 0x00, 0x12, 0x10, 0x0A, 0x10, 0x03, 0xF0, 0x00, 0x10, 0x00, 0x10, 0x00, 0x00	; U+00EC
000a67 0000
000a68 0000
000a69 1002
000a6a 1002
000a6b f00b
000a6c 1010
000a6d 1000
000a6e 0000                      .DB	0x00, 0x00, 0x00, 0x00, 0x02, 0x10, 0x02, 0x10, 0x0B, 0xF0, 0x10, 0x10, 0x00, 0x10, 0x00, 0x00	; U+00ED
000a6f 0000
000a70 0000
000a71 100a
000a72 1012
000a73 f013
000a74 1008
000a75 1000
000a76 0000                      .DB	0x00, 0x00, 0x00, 0x00, 0x0A, 0x10, 0x12, 0x10, 0x13, 0xF0, 0x08, 0x10, 0x00, 0x10, 0x00, 0x00	; U+00EE
000a77 0000
000a78 0000
000a79 101a
000a7a 1002
000a7b f003
000a7c 1018
000a7d 1000
000a7e 0000                      .DB	0x00, 0x00, 0x00, 0x00, 0x1A, 0x10, 0x02, 0x10, 0x03, 0xF0, 0x18, 0x10, 0x00, 0x10, 0x00, 0x00	; U+00EF
000a7f 0000
000a80 e001
000a81 100a
000a82 102a
000a83 101a
000a84 1016
000a85 e021
000a86 0000                      .DB	0x00, 0x00, 0x01, 0xE0, 0x0A, 0x10, 0x2A, 0x10, 0x1A, 0x10, 0x16, 0x10, 0x21, 0xE0, 0x00, 0x00	; U+00F0
000a87 0000
000a88 f00b
000a89 0012
000a8a 0012
000a8b 000a
000a8c 000a
000a8d f011
000a8e 0000                      .DB	0x00, 0x00, 0x0B, 0xF0, 0x12, 0x00, 0x12, 0x00, 0x0A, 0x00, 0x0A, 0x00, 0x11, 0xF0, 0x00, 0x00	; U+00F1
000a8f 0000
000a90 e001
000a91 1012
000a92 100a
000a93 1002
000a94 1002
000a95 e001
000a96 0000                      .DB	0x00, 0x00, 0x01, 0xE0, 0x12, 0x10, 0x0A, 0x10, 0x02, 0x10, 0x02, 0x10, 0x01, 0xE0, 0x00, 0x00	; U+00F2
000a97 0000
000a98 e001
000a99 1002
000a9a 1002
000a9b 100a
000a9c 1012
000a9d e001
000a9e 0000                      .DB	0x00, 0x00, 0x01, 0xE0, 0x02, 0x10, 0x02, 0x10, 0x0A, 0x10, 0x12, 0x10, 0x01, 0xE0, 0x00, 0x00	; U+00F3
000a9f 0000
000aa0 e001
000aa1 100a
000aa2 1012
000aa3 1012
000aa4 100a
000aa5 e001
000aa6 0000                      .DB	0x00, 0x00, 0x01, 0xE0, 0x0A, 0x10, 0x12, 0x10, 0x12, 0x10, 0x0A, 0x10, 0x01, 0xE0, 0x00, 0x00	; U+00F4
000aa7 0000
000aa8 e009
000aa9 1012
000aaa 1012
000aab 100a
000aac 100a
000aad e011
000aae 0000                      .DB	0x00, 0x00, 0x09, 0xE0, 0x12, 0x10, 0x12, 0x10, 0x0A, 0x10, 0x0A, 0x10, 0x11, 0xE0, 0x00, 0x00	; U+00F5
000aaf 0000
000ab0 e001
000ab1 101a
000ab2 1002
000ab3 1002
000ab4 101a
000ab5 e001
000ab6 0000                      .DB	0x00, 0x00, 0x01, 0xE0, 0x1A, 0x10, 0x02, 0x10, 0x02, 0x10, 0x1A, 0x10, 0x01, 0xE0, 0x00, 0x00	; U+00F6
000ab7 0000
000ab8 8000
000ab9 8000
000aba b006
000abb b006
000abc 8000
000abd 8000
000abe 0000                      .DB	0x00, 0x00, 0x00, 0x80, 0x00, 0x80, 0x06, 0xB0, 0x06, 0xB0, 0x00, 0x80, 0x00, 0x80, 0x00, 0x00	; U+00F7
000abf 0000
000ac0 e801
000ac1 3002
000ac2 5002
000ac3 9002
000ac4 1003
000ac5 e005
000ac6 0000                      .DB	0x00, 0x00, 0x01, 0xE8, 0x02, 0x30, 0x02, 0x50, 0x02, 0x90, 0x03, 0x10, 0x05, 0xE0, 0x00, 0x00	; U+00F8
000ac7 0000
000ac8 e003
000ac9 1010
000aca 1008
000acb 1000
000acc 1000
000acd f003
000ace 0000                      .DB	0x00, 0x00, 0x03, 0xE0, 0x10, 0x10, 0x08, 0x10, 0x00, 0x10, 0x00, 0x10, 0x03, 0xF0, 0x00, 0x00	; U+00F9
000acf 0000
000ad0 e003
000ad1 1000
000ad2 1000
000ad3 1008
000ad4 1010
000ad5 f003
000ad6 0000                      .DB	0x00, 0x00, 0x03, 0xE0, 0x00, 0x10, 0x00, 0x10, 0x08, 0x10, 0x10, 0x10, 0x03, 0xF0, 0x00, 0x00	; U+00FA
000ad7 0000
000ad8 e003
000ad9 1008
000ada 1010
000adb 1010
000adc 1008
000add f003
000ade 0000                      .DB	0x00, 0x00, 0x03, 0xE0, 0x08, 0x10, 0x10, 0x10, 0x10, 0x10, 0x08, 0x10, 0x03, 0xF0, 0x00, 0x00	; U+00FB
000adf 0000
000ae0 e003
000ae1 1018
000ae2 1000
000ae3 1000
000ae4 1018
000ae5 f003
000ae6 0000                      .DB	0x00, 0x00, 0x03, 0xE0, 0x18, 0x10, 0x00, 0x10, 0x00, 0x10, 0x18, 0x10, 0x03, 0xF0, 0x00, 0x00	; U+00FC
000ae7 0000
000ae8 e003
000ae9 1200
000aea 1200
000aeb 1208
000aec 1210
000aed fc03
000aee 0000                      .DB	0x00, 0x00, 0x03, 0xE0, 0x00, 0x12, 0x00, 0x12, 0x08, 0x12, 0x10, 0x12, 0x03, 0xFC, 0x00, 0x00	; U+00FD
000aef 0000
000af0 fe1f
000af1 1002
000af2 1002
000af3 1002
000af4 1002
000af5 e001
000af6 0000                      .DB	0x00, 0x00, 0x1F, 0xFE, 0x02, 0x10, 0x02, 0x10, 0x02, 0x10, 0x02, 0x10, 0x01, 0xE0, 0x00, 0x00	; U+00FE
000af7 0000
000af8 e003
000af9 1218
000afa 1200
000afb 1200
000afc 1218
000afd fc03
000afe 0000                      .DB	0x00, 0x00, 0x03, 0xE0, 0x18, 0x12, 0x00, 0x12, 0x00, 0x12, 0x18, 0x12, 0x03, 0xFC, 0x00, 0x00	; U+00FF
                                 
                                 
                                 
                                 


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATmega32U4" register use summary:
x  :   4 y  :   1 z  :   3 r0 :  12 r1 :   9 r2 :   0 r3 :   0 r4 :   0 
r5 :   0 r6 :   0 r7 :   0 r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 
r13:   0 r14:   0 r15:   0 r16: 136 r17:  50 r18:  26 r19:  17 r20:   3 
r21:  28 r22:  13 r23:  15 r24:   8 r25:  10 r26:  18 r27:  15 r28:  18 
r29:  18 r30:  23 r31:  23 
Registers used: 21 out of 35 (60.0%)

"ATmega32U4" instruction use summary:
.lds  :   0 .sts  :   0 adc   :   1 add   :   9 adiw  :   5 and   :   0 
andi  :   2 asr   :   0 bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 
brcc  :   0 brcs  :   0 break :   0 breq  :  22 brge  :   0 brhc  :   0 
brhs  :   0 brid  :   0 brie  :   0 brlo  :   3 brlt  :   1 brmi  :   0 
brne  :  20 brpl  :   0 brsh  :   0 brtc  :   0 brts  :   0 brvc  :   0 
brvs  :   0 bset  :   0 bst   :   0 call  :   1 cbi   :   6 cbr   :   0 
clc   :   0 clh   :   0 cli   :   0 cln   :   0 clr   :   9 cls   :   0 
clt   :   0 clv   :   0 clz   :   0 com   :   0 cp    :   5 cpc   :   0 
cpi   :  30 cpse  :   0 dec   :  13 eor   :   0 fmul  :   0 fmuls :   0 
fmulsu:   0 icall :   0 ijmp  :   0 in    :   5 inc   :   2 jmp   :   0 
ld    :   1 ldd   :   0 ldi   : 152 lds   :   2 lpm   :   5 lsl   :   3 
lsr   :  16 mov   :   6 movw  :   1 mul   :   1 muls  :   0 mulsu :   0 
neg   :   0 nop   :   0 or    :   3 ori   :   0 out   :  17 pop   :  48 
push  :  48 rcall :  79 ret   :  30 reti  :   4 rjmp  :  26 rol   :   0 
ror   :   0 sbc   :   0 sbci  :   0 sbi   :  14 sbic  :   0 sbis  :   0 
sbiw  :   1 sbr   :   0 sbrc  :   0 sbrs  :   4 sec   :   0 seh   :   0 
sei   :   1 sen   :   0 ser   :   0 ses   :   0 set   :   0 sev   :   0 
sez   :   0 sleep :   0 spm   :   0 st    :   4 std   :   0 sts   :  15 
sub   :   1 subi  :   1 swap  :   0 tst   :   2 wdr   :   0 
Instructions used: 42 out of 113 (37.2%)

"ATmega32U4" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0015fe   1270   4206   5476   32768  16.7%
[.dseg] 0x000100 0x000100      0      0      0    2560   0.0%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 0 warnings
